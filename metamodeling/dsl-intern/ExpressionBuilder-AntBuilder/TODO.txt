Lab Exam (Model-Driven Development): Expression Builder
-------------------------------------------------------------------------------

Implementieren Sie einen Expression Builder mit dem Namen "AntBuilder", der
ein einfaches Modell eines Ant build.xml Files aufbauen kann.

Beispiel:

	<project name="SimpleProject" basedir=".">
		<description>
			Simple project build file
	    </description>
		<property name="src" value="./src"/>
		<property name="build" value="./build"/>
		<property name="dist"  value="./dist"/>
	</project>

		new AntBuilder()
			.name("SimpleProject").baseDir(".")
				.description("Simple project build file")
				.property().name("src").value("./src")
				.property().name("build").value("./build")
				.property().name("dist").value("./dist")
			.toAnt();	

Das nötige Metamodel ist bereits vorhanden.

Testen Sie Ihre Implementierung mit der Klasse "ExpressionBuilderTest".


Allgemeines
-------------------------------------------------------------------------------

0.1 Project Name
	Nennen Sie das Projekt (und das abgegebene ZIP File) so um, dass 
	statt "MyName" ihr Name verwendet wird. Beachten Sie, dass Projekte 
	die nicht der Namenskonvention entsprechen negativ (= 0 Punkte) 
	beurteilt werden!

0.2 Manuelles Review
	Bei der Notenvergabe wird für jede Lösung ein manuelles Code-Review 
	durchgeführt. Die automatischen Tests sollen den Lösungsweg aufzeigen
	und in der Umsetzung Feedback geben. Funktionale Tests können aber nicht
	sicherstellen, dass die Implementierungs- und Design-Strukturen eingehalten
	wurden. Es ist daher auch möglich, trotz laufender Tests Punkteabzüge zu
	bekommen. Die Punkteabzüge können in einer Einsichtnahme besprochen werden.
	
0.3 Compiler Errors
	Implementierungen die nicht kompilieren, werden nicht gewertet. 
	Ausgenommen sind Code-Teile die bereits im Projekt vorhanden sind 
	(z.B.: Tests kompilieren nicht, weil die zu testenden Klassen nicht 
	implementiert wurden). 		
