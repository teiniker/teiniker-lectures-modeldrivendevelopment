<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="265" tokens="892">
<file line="168" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\OfferBean.java"/>
<file line="212" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\OfferEBean.java"/>
<codefragment>
<![CDATA[
			return offerDAO.findForDistributor(distributor);
		}
		
		//@Override
		public String getOfferState() 
		{
			if (offer!=null)
				return offer.getState();
			else
				return "in store";
		}
		//@Override
		public void setOfferState(String offerState) throws DataConstraintException
		{
			offer.setState(offerState);
		}
		//@Override
		public String getOfferComment() 
		{
			if (offer!=null)
				return offer.getComment();
			else
				return "";
		}
		//@Override
		public void setOfferComment(String offerComment) throws DataConstraintException
		{
			offer.setComment(offerComment);
		}
		//@Override
		public Long getOfferDistributor() 
		{
			if (offer!=null)
			{
				Distributor dist = offer.getDistributor();
				if (dist!=null)
					return dist.getId();
				else
					return null;
			}
			else
				return Long.valueOf("1");
		}
		//@Override
		public void setOfferDistributor(Long offerDistributor)
		{
			offer.setDistributor(distributorDAO.findById(offerDistributor, false));
		}
		//@Override
		public String getOfferDistributorName()
		{
			if (offer!=null)
				return (distributorDAO.findById(getOfferDistributor(),false).getName());
			else
				return "";
		}
		//@Override
		public void setOfferManufacturer(Long offerManufacturer)
		{
			Manufacturer man;
			if (offerManufacturer != null)
				man = manufacturerDAO.findById(offerManufacturer, false);
			else
				man = null;
			offer.setManufacturer(man);
		}
		//@Override
		public String getOfferManufacturerName()
		{
			if (offer!=null)
				return (manufacturerDAO.findById(getOfferManufacturer(), false).getName());
			else
				return "";
		}
		//@Override
		public int getOfferMinNumberOfPieces() 
		{
			if (offer!=null)
				return offer.getMinNumberOfPieces();
			else
				return 0;
		}
		//@Override
		public void setOfferMinNumberOfPieces(int offerMinNumberPcs) throws DataConstraintException 
		{
			offer.setMinNumberOfPieces(offerMinNumberPcs);
		}
		
		//@Override
		public int getOfferMinimumNumber()
		{
			if (offer != null)
				return offer.getMinPieces();   
			else
				return 0;
		}
		
		//@Override
		public void setOfferMinimumNumber(int offerMinimumNumber) throws DataConstraintException
		{
			offer.setMinPieces(offerMinimumNumber);
		}
		//@Override
		public String getOfferNumber() 
		{
			if (offer != null) 
				return offer.getOfferNumber();
			else
				return "";
		}
		//@Override
		public void setOfferNumber(String offerNumber) throws DataConstraintException
		{
			offer.setOfferNumber(offerNumber);
		}
		//@Override
		public BigDecimal getOfferPricePerPiece() 
		{
			if (offer!=null)
				return offer.getPricePerPiece();
			else
				return BigDecimal.valueOf(Double.valueOf("0"));
		}
		//@Override
		public void setOfferPricePerPiece (BigDecimal offerPricePerPiece) throws DataConstraintException 
		{
			offer.setPricePerPiece(offerPricePerPiece);
		}
		//@Override
		public void setDistributorInfo()
		{
			setDistributor(distributorDAO.findById(getOfferDistributor(), false));
		}
		//@Override
		public List<SelectItem> getOfferStates()
		{
			return offerStateItems;
		}
		//@Override
		public int getCountDistributors()
		{
			return distributorDAO.findAll().size();
		}
		//@Override
		public int getCountManufacturers()
		{
			return manufacturerDAO.findAll().size();
		}
		//@Override
		public void setCountManufacturers(int countMan)
		{
			//TODO REFACTORING NOT IN USE
			//this.countManufacturers=countMan;
		}
		//@Override
		public Distributor getDistributor()
		{
			return distributor;
		}
		//@Override
		public Distributor getDistributor(Long id, boolean lock)
		{
			return distributorDAO.findById(id, lock);
		}
		//@Override
		public void setDistributor(Distributor distributor)
		{
			this.distributor = distributor;
		}
		//@Override
		public Manufacturer getManufacturer() 
		{
			return manufacturer;
		}
		//@Override
		public void setManufacturer(Manufacturer manufacturer) 
		{
			this.manufacturer = manufacturer;
		}
		//@Override
		public List<SelectItem> getOfferStateItems ()
		{
			return offerStateItems;
		}
		//@Override
		public List<SelectItem> getDistributorItems()
		{
			//Drop Down List for Distributors
			distributorItems.clear();
			for(int i = 0; i < distributorDAO.findAll().size();i++)
				distributorItems.add(new SelectItem(distributorDAO.findAll().get(i).getId(), distributorDAO.findAll().get(i).getName()));

			return distributorItems;
		}
		//@Override
		public void setDistributorItems(List<SelectItem> distributorItems)
		{
			this.distributorItems = distributorItems;
		}
		//@Override
		public List<SelectItem> getManufacturerItems()
		{
			//Drop Down List for Manufacturers
			manufacturerItems.clear();
			manufacturerItems.add(new SelectItem(" ", " "));
			List<Manufacturer> man = manufacturerDAO.findAll();
			for(int i = 0; i < man.size();i++)
				manufacturerItems.add(new SelectItem(man.get(i).getId(), man.get(i).getName()));

			return manufacturerItems;
		}
		//@Override
		public void setManufacturerItems(List<SelectItem> manufacturerItems)
		{
			this.manufacturerItems = manufacturerItems;
		}
		//@Override
		public List<SelectItem> getSearchForDistributorItems()
		{
			return distributorItems;
		}
		//@Override
		public boolean isEditofferfrompart()
		{
			return editofferfrompart;
		}
		//@Override
		public void setEditofferfrompart(boolean editofferfrompart)
		{
			this.editofferfrompart = editofferfrompart;
		}
		//@Override
		public boolean isAlloweditoffer()
		{
			return alloweditoffer;
		}
		//@Override
		public void setAlloweditoffer(boolean alloweditoffer) 
		{
			this.alloweditoffer = alloweditoffer;
		}
		//@Override
		public void setOffer(Distributor distributor, Manufacturer manufacturer, Part part) throws DataConstraintException
		{
			offer = new Offer("","in store",0, 0,new BigDecimal(0.0),"",distributor, manufacturer, part);
		}
		//@Override
		public void setOffer(Offer offer)
		{
			this.offer = offer;
		}
		
		//@Override
		public Offer getOffer()
		{
			return offer;
		}

	


		
		
		
	}
]]>
</codefragment>
</duplication>
<duplication lines="141" tokens="778">
<file line="72" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsApprover.java"/>
<file line="71" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsDesigner.java"/>
<file line="71" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsLibrarian.java"/>
<file line="71" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsPurchaser.java"/>
<codefragment>
<![CDATA[
		login.logIn(selenium,"purchaser", "purchaser");
		assertFalse("LeftNavigation present", SeleniumTestHelper.waitForElementAndAssert(selenium, 
			"leftNavigation:AddProject", 15));
		assertTrue("LeftNavigation not present", SeleniumTestHelper.waitForElementAndAssert(selenium, 
				"leftNavigation:ViewProjects", 15));
		// 2
		selenium.click("availableTasks:ProjectsImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You are here: Home | Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You can choose one of the following tasks:"));
		assertFalse("Navigation present", SeleniumTestHelper.waitForElementAndAssert(selenium,
			"Projects:AddProjectImg", 15));
		assertFalse("Navigation present", SeleniumTestHelper.waitForElementAndAssert(selenium,
			"Projects:AddProject", 15));
		assertTrue("Navigation not present", SeleniumTestHelper.waitForElementAndAssert(selenium,
				"Projects:ViewProjectsImg", 15));
		assertTrue("Navigation not present", SeleniumTestHelper.waitForElementAndAssert(selenium,
				"Projects:ViewProjects", 15));
		// 3
		selenium.click("Projects:ViewProjectsImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You are here: Home | Projects | View Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 1"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 2"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 3"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 4"));
		// 4
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 5
		selenium.click("leftNavigation:ViewProjects");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
				"You are here: Home | Projects | View Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 1"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 2"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 3"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 4"));
		// 6
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddMain.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 7
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 8
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddInputData.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 9
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 10
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddProjectLeader.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 11
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 12
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddProjectMember.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 13
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 14
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddReview.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 15
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 16
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddSuccess.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 17
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
	}
	
	
	
	
}
]]>
</codefragment>
</duplication>
<duplication lines="271" tokens="755">
<file line="1426" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\PartHandler.java"/>
<file line="187" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\OfferViewHelper.java"/>
<codefragment>
<![CDATA[
		logger.info("OfferViewHelper.getOffersForPartCount()");
		return getOfferBean().findForPart(getPart(), true).size();
	}
	//@Override
	public String getOfferState() 
	{
		return getOfferBean().getOfferState();
	}
	
	//@Override
	public void setOfferState(String offerState)
	{
		try
		{
			getOfferBean().setOfferState(offerState);
		} 
		catch (DataConstraintException e)
		{
			e.printStackTrace();
			facesMessages.add("Unknown Error");
		}
	}
	
	//@Override
	public String getOfferComment() 
	{
		return getOfferBean().getOfferComment();
	}
	
	//@Override
	public void setOfferComment(String offerComment)
	{
		try
		{
			getOfferBean().setOfferComment(offerComment);
		}
		catch (DataConstraintException e)
		{
			e.printStackTrace();
			facesMessages.add("Unknown Error");
		}
	}
	
	//@Override
	public Long getOfferDistributor() 
	{
		return getOfferBean().getOfferDistributor();
	}
	
	//@Override
	public void setOfferDistributor(Long offerDistributor) 
	{
		getOfferBean().setOfferDistributor(offerDistributor);
	}
	
	//@Override
	public String getOfferDistributorName()
	{
		return getOfferBean().getOfferDistributorName();
	}
	
	//@Override
	public Long getOfferManufacturer()
	{
		return getOfferBean().getOfferManufacturer();
	}
	
	//@Override
	public void setOfferManufacturer(Long offerManufacturer)
	{
		getOfferBean().setOfferManufacturer(offerManufacturer);
	}
	
	//@Override
	public String getOfferManufacturerName()
	{
		return getOfferBean().getOfferManufacturerName();
	}
	
	//@Override
	public int getOfferMinNumberOfPieces() 
	{
		return getOfferBean().getOfferMinNumberOfPieces();
	}
	
	//@Override
	public void setOfferMinNumberOfPieces(int offerMinNumberPcs)
	{
		try
		{
			getOfferBean().setOfferMinNumberOfPieces(offerMinNumberPcs);
		}
		catch (DataConstraintException e)
		{
			e.printStackTrace();
			facesMessages.add("Unknown Error");
		}
	}
	
	//@Override
	public int getOfferMinimumNumber()
	{
		return getOfferBean().getOfferMinimumNumber();
	}
	
	//@Override
	public void setOfferMinimumNumber(int offerMinimumNumber)
	{
		try
		{
			getOfferBean().setOfferMinimumNumber(offerMinimumNumber);
		} 
		catch (DataConstraintException e)
		{
			e.printStackTrace();
			facesMessages.add("Unknown Error");
		}
	}
	
	//@Override
	public String getOfferNumber() 
	{
		return getOfferBean().getOfferNumber();
	}
	
	//@Override
	public void setOfferNumber(String offerNumber)
	{
		try
		{
			getOfferBean().setOfferNumber(offerNumber);
		} 
		catch (DataConstraintException e)
		{
			e.printStackTrace();
			facesMessages.add("Unknown Error");
		}
	}
	
	//@Override
	public BigDecimal getOfferPricePerPiece() 
	{
		return getOfferBean().getOfferPricePerPiece();
	}
	
	//@Override
	@Length(min=1, message="You have to input a Price per Piece!")
	@Pattern(regex="[0-9]+[.]{1,1}[0-9]{0,2}", message="Please input digits only into the field 'Price per Piece'!")
	public void setOfferPricePerPiece (BigDecimal offerPricePerPiece)
	{
		try
		{
			getOfferBean().setOfferPricePerPiece(offerPricePerPiece);
		} 
		catch (DataConstraintException e)
		{
			e.printStackTrace();
			facesMessages.add("Unknown Error");
		}
	}
	
	//@Override
	public void setDistributorInfo() // Set Information about Distributor to Show it by Availabilitycheck
	{
		getOfferBean().setDistributorInfo();
	}
	
	//@Override
	public List<SelectItem> getOfferStates() // States for AvailabilityCheck
	{
		return getOfferBean().getOfferStates();
	}
	
	//@Override
	public int getCountDistributors()
	{
		return getOfferBean().getCountDistributors();
	}
	
	//@Override
	public int getCountManufacturers()
	{
		return getOfferBean().getCountManufacturers();
	}
	
	//@Override
	public void setCountManufacturers(int countMan)
	{
		getOfferBean().setCountManufacturers(countMan);
	}
	
	//@Override
	public Distributor getDistributor()
	{
		return getOfferBean().getDistributor();
	}
	
	//@Override
	public void setDistributor(Distributor distributor)
	{
		getOfferBean().setDistributor(distributor);
	}
	
	//@Override
	public Manufacturer getManufacturer() 
	{
		return getOfferBean().getManufacturer();
	}
	
	//@Override
	public void setManufacturer(Manufacturer manufacturer) 
	{
		getOfferBean().setManufacturer(manufacturer);
	}
	
	//@Override
	public List<SelectItem> getDistributorItems()
	{
		return getOfferBean().getDistributorItems();
	}
	
	//@Override
	public void setDistributorItems(List<SelectItem> distributorItems)
	{
		getOfferBean().setDistributorItems(distributorItems);
	}
	
	//@Override
	public List<SelectItem> getManufacturerItems() //  gets Manufacturer for a DropDownList
	{
		return getOfferBean().getManufacturerItems();
	}
	
	//@Override
	public void setManufacturerItems(List<SelectItem> manufacturerItems) // sets Manufacturer for a DropDownList
	{
		getOfferBean().setManufacturerItems(manufacturerItems);
	}
	
	//@Override
	public List<SelectItem> getSearchForDistributorItems() // gets Distributor for a DropDown List
	{
		return getOfferBean().getSearchForDistributorItems();
	}
	
	//@Override
	public boolean isEditofferfrompart()
	{
		return getOfferBean().isEditofferfrompart();
	}
	
	//@Override
	public void setEditofferfrompart(boolean editofferfrompart)
	{
		getOfferBean().setEditofferfrompart(editofferfrompart);
	}
	
	//@Override
	public boolean isAlloweditoffer() 
	{
		return getOfferBean().isAlloweditoffer();
	}
	
	//@Override
	public void setAlloweditoffer(boolean alloweditoffer) 
	{
		getOfferBean().setAlloweditoffer(alloweditoffer);
	}
	
	//@Override
	public OfferBeanLocal getOfferBean() {
]]>
</codefragment>
</duplication>
<duplication lines="128" tokens="706">
<file line="84" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsApprover.java"/>
<file line="83" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsReviewer.java"/>
<codefragment>
<![CDATA[
		assertFalse("Navigation not present", SeleniumTestHelper.waitForElementAndAssert(selenium,
			"Projects:AddProjectImg", 15));
		assertFalse("Navigation present", SeleniumTestHelper.waitForElementAndAssert(selenium,
			"Projects:AddProject", 15));
		assertTrue("Navigation not present", SeleniumTestHelper.waitForElementAndAssert(selenium,
				"Projects:ViewProjectsImg", 15));
		assertTrue("Navigation not present", SeleniumTestHelper.waitForElementAndAssert(selenium,
				"Projects:ViewProjects", 15));
		
		// 3
		selenium.click("Projects:ViewProjectsImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You are here: Home | Projects | View Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 1"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 2"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 3"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 4"));
		// 4
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 5
		selenium.click("leftNavigation:ViewProjects");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
				"You are here: Home | Projects | View Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 1"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 2"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 3"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 4"));
		// 6
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddMain.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 7
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 8
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddInputData.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 9
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 10
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddProjectLeader.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 11
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 12
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddProjectMember.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 13
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 14
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddReview.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 15
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 16
		selenium.open("http://localhost:8080/amiesp_db/ProjectsAddSuccess.seam");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Sorry ..."));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You have no permissions to view this page."));
		assertFalse("Text present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"This wizard leads you through the process of generating a new Project.", 15));
		// 17
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
	}
	
	
}
]]>
</codefragment>
</duplication>
<duplication lines="68" tokens="564">
<file line="1192" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1291" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
	public void approvalBasicTest() throws DrawingAlreadyApproved, DrawingNotReviewed, DrawingAlreadyReviewed
	{
		final DrawingDao drdao = new DrawingDaoHibernateImpl(this.em);
		
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		final String drawingNumber3 = "drawingNumber3";
		
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drawingNumber3, "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
			drdao.makePersistent(drawing3);	
			
			part1.setDrawing(drawing1);
			part2.setDrawing(drawing2);
			part2.setDrawing(drawing3);
		
			User user1 = this.createUser();
			
			drdao.detachAndBegin();
			
			drdao.reviewDrawing(drawing1, user1, "the approval docmment of drawing 1", true);
]]>
</codefragment>
</duplication>
<duplication lines="63" tokens="560">
<file line="419" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="513" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findDLatestDrawingForPart()
	{
		final DrawingDao drdao = new DrawingDaoHibernateImpl(this.em);
		
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		final String drawingNumber1 = "drNumber1";
		final String drawingNumber2 = "drNumber2";
		final String drawingNumber3 = "drNumber3";
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
			
			drdao.makePersistent(drawing1);
			final long id1 = drawing1.getId();
			drdao.makePersistent(drawing2);
			final long id2 = drawing2.getId();
			drdao.makePersistent(drawing3);
			final long id3 = drawing3.getId();
]]>
</codefragment>
</duplication>
<duplication lines="67" tokens="554">
<file line="1193" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1384" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
	{
		final DrawingDao drdao = new DrawingDaoHibernateImpl(this.em);
		
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		final String drawingNumber3 = "drawingNumber3";
		
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drawingNumber3, "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
			drdao.makePersistent(drawing3);	
			
			part1.setDrawing(drawing1);
			part2.setDrawing(drawing2);
			part2.setDrawing(drawing3);
		
			User user1 = this.createUser();
			
			drdao.detachAndBegin();
			
			drdao.approveDrawing(drawing1, user1, "the approval docmment of drawing 1", true);
]]>
</codefragment>
</duplication>
<duplication lines="59" tokens="532">
<file line="523" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="630" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
						
			drdao.makePersistent(drawing1);
			final long id1 = drawing1.getId();
			drdao.makePersistent(drawing2);
			final long id2 = drawing2.getId();
			drdao.makePersistent(drawing3);
			final long id3 = drawing3.getId();
			
			part1.setDrawing(drawing1);
			part2.setDrawing(drawing2);
			part2.setDrawing(drawing3);
		
			drdao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="523">
<file line="922" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1016" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
	public void highestVersionNumber()
	{
		final DrawingDao drdao = new DrawingDaoHibernateImpl(this.em);
		
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		final String drawingNumber3 = "drawingNumber3";
		
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
	
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drawingNumber3, "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
			drdao.makePersistent(drawing3);	
			
			part1.setDrawing(drawing1);
			part2.setDrawing(drawing2);
			part2.setDrawing(drawing3);
]]>
</codefragment>
</duplication>
<duplication lines="53" tokens="509">
<file line="429" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="630" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
						
			drdao.makePersistent(drawing1);
			final long id1 = drawing1.getId();
			drdao.makePersistent(drawing2);
			final long id2 = drawing2.getId();
			drdao.makePersistent(drawing3);
			final long id3 = drawing3.getId();
]]>
</codefragment>
</duplication>
<duplication lines="117" tokens="492">
<file line="58" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\OfferBean.java"/>
<file line="76" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\OfferEBean.java"/>
<codefragment>
<![CDATA[
			if(offerDAO == null)
				offerDAO = new OfferDaoHibernateImpl(this.em);
			if(manufacturerDAO == null)
				manufacturerDAO = new ManufacturerDaoHibernateImpl(this.em);
			if(distributorDAO == null)
				distributorDAO = new DistributorDaoHibernateImpl(this.em);

			try
			{
				offer = new Offer("","in store",0, 0,new BigDecimal(0.0),"",distributor, manufacturer, null);
			}
			catch (DataConstraintException e)
			{
				e.printStackTrace();
			}

			distributorItems = new ArrayList<SelectItem>();
			manufacturerItems = new ArrayList<SelectItem>();

			offerStateItems = new ArrayList<SelectItem>();
			offerStateItems.add(new SelectItem("in store", "In Store"));
			offerStateItems.add(new SelectItem("available", "Available"));
			offerStateItems.add(new SelectItem("inquire", "Inquire"));
			offerStateItems.add(new SelectItem("not available", "Not Available"));
			offerStateItems.add(new SelectItem("discontinued", "Discontinued"));
		
		}
		
		
		
		/*
		 * add an Offer to a Part
		 */
		//@Override
		public void addOffer(String offerNumber, String state, int minPieces, int minNumber, 
				BigDecimal pricePerPiece, String comment, Part part) throws DataConstraintException
		{
			Offer offerLocal = 	new Offer(offerNumber, state, minPieces, minNumber, pricePerPiece, comment, getDistributor(getOfferDistributor(), false), part);
			offerDAO.makePersistent(offerLocal);

			if (manufacturer != null)
			{	
				Manufacturer man = manufacturerDAO.findById(getOfferManufacturer(), false);
				offerLocal.setManufacturer(man);
			}
		}
		/*
		 * Open the "Add Offer" Page
		 */
		//@Override
		public void addNewOffer(String partnumber, Boolean fromPart) throws DataConstraintException
		{
			setOfferDistributor(Long.valueOf("1"));
			setOfferManufacturer(Long.valueOf("0"));
			setOfferMinimumNumber(new Integer(1));
			setOfferComment("");
			setOfferMinNumberOfPieces(new Integer(1));
			setOfferPricePerPiece(new BigDecimal(1.0));
			setOfferNumber("");
			setOfferState("in store");
			setAlloweditoffer(false);
			setEditofferfrompart(fromPart);
		}
		/*
		 * Save Offer Changes
		 */
		//@Override
		public void saveOffer(Offer offer)
		{
			Offer o = em.merge(offer);
			Manufacturer man = null;

			if (getOfferManufacturer() != null)
				man = manufacturerDAO.findById(getOfferManufacturer(), false);

			o.setManufacturer(man);
			offerDAO.makePersistent(o);
		}
		/*
		 * Open the "Edit Offer" Page
		 */
		//@Override
		public void editOffer(Offer offer, Boolean fromPart)
		{
			setOffer(offer);
			setAlloweditoffer(true); // to differentiate if detail or edit view is active
			setEditofferfrompart(fromPart);
		}
		/*
		 * Approve Offer
		 */
		//@Override
		public void approveOffer(Offer offer)
		{
			setOffer(offer);
			Offer o = em.merge(getOffer());
			offerDAO.makePersistent(o);
		}
		/*
		 * Returns the Manufacturer of an specific Offer
		 */
		//@Override
		public Long getOfferManufacturer()
		{
			if (offer!=null)
			{
				Manufacturer man = offer.getManufacturer();
				if (man != null)
					return man.getId();
				else
					return null;
			}
			else
				return null;
		}
		//@Override
		public Part findPartById(String partnumber){
]]>
</codefragment>
</duplication>
<duplication lines="54" tokens="482">
<file line="238" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1104" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
	public void getHistory()
	{
		final DrawingDao drdao = new DrawingDaoHibernateImpl(this.em);
		
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);

			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drdao, drawing1, "new comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);drdao.makePersistent(drawing3);
]]>
</codefragment>
</duplication>
<duplication lines="51" tokens="480">
<file line="242" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="332" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
		final PartDao pdao = new PartDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
			
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
			drdao.makePersistent(drawing3);
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="462">
<file line="332" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1108" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);

			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drdao, drawing1, "new comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);drdao.makePersistent(drawing3);
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="446">
<file line="245" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="929" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drawingNumber3, "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="426">
<file line="429" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1201" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="408">
<file line="939" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1212" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drawingNumber3, "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
			drdao.makePersistent(drawing3);	
			
			part1.setDrawing(drawing1);
			part2.setDrawing(drawing2);
			part2.setDrawing(drawing3);
]]>
</codefragment>
</duplication>
<duplication lines="140" tokens="381">
<file line="474" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandler.java"/>
<file line="481" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandler.java"/>
<codefragment>
<![CDATA[
		symbolHandler.setUploadedName(name);
	}
	
	public String getUploadedSymbolMimeType()
	{
		return symbolHandler.getUploadedMimeType();
	}
	
	public void setUploadedSymbolMimeType(String mimeType)
	{
		symbolHandler.setUploadedMimeType(mimeType);
	}
	
	public byte[] getUploadedGeometryFile()
	{
		return geometryHandler.getUploadedFile();
	}
	
	public void setUploadedGeometryFile(byte[] file)
	{
		geometryHandler.setUploadedFile(file);
	}
	
	public String getUploadedGeometryName()
	{
		return geometryHandler.getUploadedName();
	}
	
	public void setUploadedGeometryName(String name)
	{
		geometryHandler.setUploadedName(name);
	}
	
	public String getUploadedGeometryMimeType()
	{
		return geometryHandler.getUploadedMimeType();
	}
	
	public void setUploadedGeometryMimeType(String mimeType)
	{
		geometryHandler.setUploadedMimeType(mimeType);
	}
	
	public byte[] getUploadedMapFile()
	{
		return mapHandler.getUploadedFile();
	}
	
	public void setUploadedMapFile(byte[] file)
	{
		mapHandler.setUploadedFile(file);
	}
	
	public String getUploadedMapName()
	{
		return mapHandler.getUploadedName();
	}
	
	public void setUploadedMapName(String name)
	{
		mapHandler.setUploadedName(name);
	}
	
	public String getUploadedMapMimeType()
	{
		return mapHandler.getUploadedMimeType();
	}
	
	public void setUploadedMapMimeType(String mimeType)
	{
		mapHandler.setUploadedMimeType(mimeType);
	}
	
	//@Override
	public List<File> getSymbolNames()
	{		
		return symbolHandler.getNames();
	}
	
	//@Override
	public List<File> getGeometryNames()
	{
		return geometryHandler.getNames();
	}
	
	//@Override
	public List<File> getMapNames()
	{
		return mapHandler.getNames();
	}
	
	//@Override
	public String getErrorMessage() {
		return errorMessage;
	}

	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}
	
	private void clearErrorMessage()
	{
		this.setErrorMessage("");
	}

	//@Override
	public String getSymbolErrorMessage()
	{
		return symbolHandler.getErrorMessage();
	}

	public void setSymbolErrorMessage(String symbolErrorMessage)
	{
		symbolHandler.setErrorMessage(symbolErrorMessage);
	}

	//@Override
	public String getGeometryErrorMessage()
	{
		return geometryHandler.getErrorMessage();
	}

	public void setGeometryErrorMessage(String geometryErrorMessage)
	{
		geometryHandler.setErrorMessage(geometryErrorMessage);
	}

	//@Override
	public String getMapErrorMessage()
	{
		return mapHandler.getErrorMessage();
	}

	public void setMapErrorMessage(String mapErrorMessage)
	{
		mapHandler.setErrorMessage(mapErrorMessage);
	}

	//@Override
	public String getDrawingErrorMessage()
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="375">
<file line="170" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="260" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
			drdao.makePersistent(drawing3);
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="372">
<file line="1121" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1212" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drawingNumber3, "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="357">
<file line="170" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="1216" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			drdao.makePersistent(drawing1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			drdao.makePersistent(drawing2);
			final Drawing drawing3 = new Drawing(drawingNumber3, "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="356">
<file line="654" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="755" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry2 = new Geometry(geo2,"gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
					
			drdao.makePersistent(drawing1);
			final long id1 = drawing1.getId();
			drdao.makePersistent(drawing2);
			final long id2 = drawing2.getId();
			drdao.makePersistent(drawing3);
			final long id3 = drawing3.getId();
			
			part1.setDrawing(drawing1);
			part2.setDrawing(drawing2);
			part2.setDrawing(drawing3);
		
			drdao.detachAndBegin();
		
			drdao.newDrawingVersionFor(drawing1, "Hello World", tempSymbol2, tempGeometry2, tempMap2, null, tempDrawingFile2);
			
			drdao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="354">
<file line="753" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="844" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry1 = new Geometry(geo1,"gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry(geo2,"gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
					
			drdao.makePersistent(drawing1);
			final long id1 = drawing1.getId();
			drdao.makePersistent(drawing2);
			final long id2 = drawing2.getId();
			drdao.makePersistent(drawing3);
			final long id3 = drawing3.getId();
			
			part1.setDrawing(drawing1);
			part2.setDrawing(drawing2);
			part2.setDrawing(drawing3);
		
			drdao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="80" tokens="344">
<file line="19" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\ManageProjectsListFilter.java"/>
<file line="19" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\viewProject\ViewProjectsListFilter.java"/>
<codefragment>
<![CDATA[
public class ViewProjectsListFilter extends SeleneseTestCase
{
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		// log in
		login = new LogInHelper();
		login.logIn(selenium);
		
		prepare = new SeleniumTestPreparation();
		
		// drop existing projects and projectMemberships
		prepare.removeAllProjectsAndMemberships();
		
		// create only the needed project 
		prepareData();
	}
	
	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareData() throws DataConstraintException
	{
		Calendar calendar = new GregorianCalendar();
		calendar.set(new Integer(2009),new Integer(6), new Integer(1));
        Date start1 = calendar.getTime();
        calendar.set(new Integer(2009),new Integer(6), new Integer(30));
        Date end1 = calendar.getTime();
        
        prepare.createProject("Projekt 1", "PIE.09.001-01", start1, end1, "Stocksreiter");
        
        calendar.set(new Integer(2009),new Integer(6), new Integer(20));
        Date start2 = calendar.getTime();
        calendar.set(new Integer(2009),new Integer(6), new Integer(22));
        Date end2 = calendar.getTime();
        
        prepare.createProject("Test", "PIE.09.001-02", start2, end2, "Ruchesi");
	}
	
	
	/******************************************
	 * Projects Testcase Nr. 4.3
	 * Method tests the functionality of the 
	 * different filters in the view "View 
	 * Projects". 
	 ******************************************/
	@Test
	public void testManageViewFilters() throws Exception 
	{
		// 1
		selenium.click("topNavigation:HomeTop");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Welcome to the CaDDaT Web-Interface!"));
		// 2
		selenium.click("availableTasks:ProjectsImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You can choose one of the following tasks:"));
		// 3
		selenium.click("Projects:ViewProjectsImg");
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="334">
<file line="255" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="440" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
			
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="333">
<file line="547" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="755" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry2 = new Geometry(geo2,"gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
					
			drdao.makePersistent(drawing1);
			final long id1 = drawing1.getId();
			drdao.makePersistent(drawing2);
			final long id2 = drawing2.getId();
			drdao.makePersistent(drawing3);
			final long id3 = drawing3.getId();
			
			part1.setDrawing(drawing1);
			part2.setDrawing(drawing2);
			part2.setDrawing(drawing3);
		
			drdao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="70" tokens="321">
<file line="28" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\usermanagement\seam\DAOTest.java"/>
<file line="30" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\usermanagement\seam\InjectionTest.java"/>
<codefragment>
<![CDATA[
public class InjectionTest extends SeamTest
{
	private EntityManager em;
	private RoleDAO roleDAO;
	private UserDAO userDAO;
	
	@BeforeMethod
	public void setUp()
	{
		try
		{
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("amiesp_db"); 
			em = emf.createEntityManager();
			
			roleDAO = new RoleDAO();
			roleDAO.setEntityManager(em);
		
			userDAO = new UserDAO();
			userDAO.setEntityManager(em);
			
			em.getTransaction().begin();
			
			// create a User entity 
			User egon = userDAO.create("eteiniker", "eteiniker", "Egon", "Teiniker");
			userDAO.insert(egon);
	
	        User willi = userDAO.create("wzugaj", "wzugaj", "Willi", "Zugaj");
	        userDAO.insert(willi);
	        		
	        User eva = userDAO.create("etittel", "etittel", "Eva", "Tittel");
	        userDAO.insert(eva);
	        
	        
			// create a Role entity
			Role hacker = roleDAO.create(Role.MEMBER_NAME);
			roleDAO.insert(hacker);
			
			// create another Role entity
			Role admin = roleDAO.create(Role.ADMIN_NAME);
			roleDAO.insert(admin);
			
			Role manager = roleDAO.create(Role.MANAGER_NAME);
			roleDAO.insert(manager);
				
			
			// connect a User with a Role
			egon.getRoles().add(hacker);
			hacker.getUsers().add(egon);
	
			// connect the same User with another Role
			egon.getRoles().add(admin);
			admin.getUsers().add(egon);
			
			
			willi.getRoles().add(hacker);
			hacker.getUsers().add(willi);
			
			willi.getRoles().add(manager);
			manager.getUsers().add(willi);
			
			willi.getRoles().add(admin);
			admin.getUsers().add(willi);
					
			eva.getRoles().add(hacker);
			hacker.getUsers().add(eva);
	
			em.getTransaction().commit();	
		}
		catch(DataConstraintException exc)
		{
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="319">
<file line="170" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="444" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="315">
<file line="442" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="799" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			
			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
				
			BigDecimal price = new BigDecimal("12345.00");
				
			//create offer
			Offer offer = new Offer(offerNumber,Offer.STATE_AVAILABLE,100,50,price,"offerComment",distr1,man1,partRE_00002);
			em.persist(offer);
			em.flush();
			em.clear();
				
			Offer offer_new = em.find(Offer.class,1L);
			assertEquals(offerNumber,offer_new.getOfferNumber());
		}
		catch(DataConstraintException exc)
		{
			assertTrue(exc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * set all objects of offer
	 */
	@Test
	public void setObjects()
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="310">
<file line="453" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="755" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry2 = new Geometry(geo2,"gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
			final Drawing drawing2 = new Drawing("drawingNumber2", "drawing_comment", tempSymbol2, tempGeometry2, tempMap2, tempDrawingFile2);
			final Drawing drawing3 = new Drawing("drawingNumber3", "drawing_comment", tempSymbol3, tempGeometry3, tempMap3, tempDrawingFile3);
					
			drdao.makePersistent(drawing1);
			final long id1 = drawing1.getId();
			drdao.makePersistent(drawing2);
			final long id2 = drawing2.getId();
			drdao.makePersistent(drawing3);
			final long id3 = drawing3.getId();
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="302">
<file line="338" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="419" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findAvailabilityChecksForPartByFilter()
	{
		final AvailabilityCheckDao adao = new AvailabilityCheckDaoHibernateImpl(this.em);
		
		try
		{
			adao.begin();
			
			// creation of part
			final ProductGroupDao pgroupDao = new ProductGroupDaoHibernateImpl(this.em);
			final PartDao partDao = new PartDaoHibernateImpl(this.em);
			
			final ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			
			// groupCP.getParts().add(part1);
			final Part partOS_00001 = new Part("OS_00001","Description" , Part.STATUS_PART, groupOS, null);
			final Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
			final Part partOS_00003 = new Part("OS_00003", "VCXO3", Part.STATUS_PART, groupOS, null);
						
			final StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			final StringProperty propvalue = new StringProperty("Value", "Value Description");
			groupOS.getProperties().add(propdrawing);
			groupOS.getProperties().add(propvalue);
			new StringPropertyValue("10014", propdrawing, partOS_00001);
			new StringPropertyValue("10014", propdrawing, partOS_00002);
			new StringPropertyValue("10014", propvalue, partOS_00001);
			new StringPropertyValue("10014", propvalue, partOS_00002);
							
			pgroupDao.makePersistent(groupOS);
			
			User user1 = this.createUser();
			
			// availability Check
			final AvailabilityCheck avcheck1 = new AvailabilityCheck(100, "comment_owner1", "comment_purchaser1", user1, partOS_00002);
			final AvailabilityCheck avcheck2 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2", user1, partOS_00002);
			final AvailabilityCheck avcheck3 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2OS3", user1, partOS_00003);
			final AvailabilityCheck avcheck4 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2OS1", user1, partOS_00001);
			
			adao.makePersistent(avcheck1);
			adao.makePersistent(avcheck2);
			adao.makePersistent(avcheck3);
			adao.makePersistent(avcheck4);
			adao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="69" tokens="284">
<file line="20" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectLeader.java"/>
<file line="20" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectMembers.java"/>
<codefragment>
<![CDATA[
public class EditProjectMembers extends SeleneseTestCase
{
	private final static String[] NEEDED_USERS = {"Knoll", "Kohl", "Neissl", "Netzberger", "Okorn", "Ruchesi", "mike", "Stocksreiter"};
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		prepare = new SeleniumTestPreparation();
		
		// activate the needed users only
		prepare.activateNeededUsersOnly(NEEDED_USERS);
		
		// drop existing projects and projectMemberships
		prepare.removeAllProjectsAndMemberships();
		
		// create only the needed project 
		prepareProjectData();
		
		// log in
		login = new LogInHelper();
		login.logIn(selenium);
		
	}
	
	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareProjectData() throws DataConstraintException
	{
		Calendar calendar = new GregorianCalendar();
		calendar.set(new Integer(2009),new Integer(6), new Integer(1));
        Date start = calendar.getTime();
        calendar.set(new Integer(2009),new Integer(6), new Integer(30));
        Date end = calendar.getTime();
        
        String[] members = {"Knoll", "Kohl", "Neissl", "mike"};
        
        prepare.createProject("Projekt 1", "PIE.09.001-01", start, end, "My Description", "My additional Notes", "Stocksreiter",
        		members,
        		new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1));
	}
	
	/******************************************
	 * Projects Testcase Nr. 3.16
	 * Method tests if it is possible to change
	 * the current project members. Also the 
	 * functionality of the filter is tested.
	 ******************************************/
	@Test
	public void testChangeProjectMembers() throws Exception
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="283">
<file line="617" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="676" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="735" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
	public void findAndComparePart()
	{
		String offerComment = "the offer coment";
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
				
			BigDecimal price = new BigDecimal("12345.00");
				
			//create offer
			Offer offer = new Offer("offerNumber",Offer.STATE_AVAILABLE,7,3,price,offerComment,distr1,man1,partRE_00002);
			em.persist(offer);
			em.flush();
			em.clear();
				
			Offer offer_new = em.find(Offer.class,1L);
			assertEquals("RE_00002",offer_new.getPart().getPartNumber());
]]>
</codefragment>
</duplication>
<duplication lines="42" tokens="250">
<file line="117" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\PartBean.java"/>
<file line="75" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartEBean.java"/>
<codefragment>
<![CDATA[
	}
	
	
	
	
	public boolean addPart(User user, ProductGroup productGroup, String neededNumbers, String searchDescription,
			String uploadedFileName, String uploadedContentType, byte[] uploadedFile,
			List<PartHelperProperty> helperProperties) throws DataConstraintException
	{
		// Split it in ProductGroupIdentifier and the Number of this Group
		String partNumberSplit[] = getHighestPartNumber(productGroup).split("_");
		// Generate the next PartNumber of ProductGroup
		int nextPartNumberInteger = Integer.valueOf(partNumberSplit[1])+1;
		// Generate the PartNumber with the Prefix like "CC_001234"
		String nextPartNumber = partNumberSplit[0]+"_";
		//Bugfix Nr. 56 - Wrong Part Number Calc.
		for(int i = String.valueOf(nextPartNumberInteger).length(); i < 5; i++)
			nextPartNumber = nextPartNumber + "0";
		
		nextPartNumber = nextPartNumber + String.valueOf(nextPartNumberInteger);		
		// DataSheet for Part
		DataSheet dataSheet = new DataSheet(uploadedFileName, uploadedContentType, "", uploadedFile);
		new DataSheetDaoHibernateImpl(this.em).makePersistent(dataSheet);
		// Make the Part Persistent
		ProductGroup tempGroup = em.merge(productGroup);
		Part tempPart = new Part(nextPartNumber, searchDescription, 0, tempGroup, dataSheet, partComment);
		new ProductGroupDaoHibernateImpl(this.em).makePersistent(tempGroup);

		StringProperty tempPropertyAdd;
		StringPropertyValue tempPropertyValueAdd;
		// Add Properties to the Part
		for(int i = 0; i < properties.size(); i++) //Add Properties
		{
			tempPropertyAdd = (StringProperty) properties.get(i);
			tempPropertyValueAdd = new StringPropertyValue(helperProperties.get(i).getValue(), (StringProperty) properties.get(i), tempPart);
		}
		setPart(findById(nextPartNumber, false));		
		return true;
	}
	
	
	public void prepareEditandShowPart(String partnumber, boolean permission)
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="245">
<file line="110" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="173" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="273" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findAvailabilityChecksForPart()
	{
		final AvailabilityCheckDao adao = new AvailabilityCheckDaoHibernateImpl(this.em);
		
		try
		{
			adao.begin();
			
			// creation of part
			final ProductGroupDao pgroupDao = new ProductGroupDaoHibernateImpl(this.em);
			final PartDao partDao = new PartDaoHibernateImpl(this.em);
			
			final ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			
			// groupCP.getParts().add(part1);
			final Part partOS_00001 = new Part("OS_00001","Description" , Part.STATUS_PART, groupOS, null);
			final Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
						
			final StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			final StringProperty propvalue = new StringProperty("Value", "Value Description");
			groupOS.getProperties().add(propdrawing);
			groupOS.getProperties().add(propvalue);
			new StringPropertyValue("10014", propdrawing, partOS_00001);
			new StringPropertyValue("10014", propdrawing, partOS_00002);
			new StringPropertyValue("10014", propvalue, partOS_00001);
			new StringPropertyValue("10014", propvalue, partOS_00002);
							
			pgroupDao.makePersistent(groupOS);
			
			User user1 = this.createUser();
			
			// availability Check
			final AvailabilityCheck avcheck1 = new AvailabilityCheck(100, "comment_owner1", "comment_purchaser1", user1, partOS_00001);
			final AvailabilityCheck avcheck2 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2", user1, partOS_00002);
			
			adao.makePersistent(avcheck1);
			adao.makePersistent(avcheck2);
			adao.detachAndBegin();
			
			
			List<AvailabilityCheck> resultList = adao.findForPart(partOS_00002);
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="237">
<file line="110" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="551" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findtimestampsAndInitialisation()
	{
		final AvailabilityCheckDao adao = new AvailabilityCheckDaoHibernateImpl(this.em);
		
		try
		{
			adao.begin();
			
			// creation of part
			final ProductGroupDao pgroupDao = new ProductGroupDaoHibernateImpl(this.em);
			final PartDao partDao = new PartDaoHibernateImpl(this.em);
			
			final ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			
			// groupCP.getParts().add(part1);
			final Part partOS_00001 = new Part("OS_00001","Description" , Part.STATUS_PART, groupOS, null);
			final Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
						
			final StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			final StringProperty propvalue = new StringProperty("Value", "Value Description");
			groupOS.getProperties().add(propdrawing);
			groupOS.getProperties().add(propvalue);
			new StringPropertyValue("10014", propdrawing, partOS_00001);
			new StringPropertyValue("10014", propdrawing, partOS_00002);
			new StringPropertyValue("10014", propvalue, partOS_00001);
			new StringPropertyValue("10014", propvalue, partOS_00002);
							
			pgroupDao.makePersistent(groupOS);
			
			User user1 = this.createUser();
			
			// availability Check
			final AvailabilityCheck avcheck1 = new AvailabilityCheck(100, "comment_owner1", "comment_purchaser1", user1, partOS_00001);
			final AvailabilityCheck avcheck2 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2", user1, partOS_00002);
			
			adao.makePersistent(avcheck1);
			adao.makePersistent(avcheck2);
			adao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="237">
<file line="20" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataAllowedValues.java"/>
<file line="20" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataUnusualValues.java"/>
<codefragment>
<![CDATA[
public class EditProjectDataUnusualValues extends SeleneseTestCase
{
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		// log in
		login = new LogInHelper();
		login.logIn(selenium);
		
		prepare = new SeleniumTestPreparation();
		
		// drop existing projects and projectMemberships
		prepare.removeAllProjectsAndMemberships();
		
		// create only the needed project 
		prepareProjectData();
	}
	
	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareProjectData() throws DataConstraintException
	{
		Calendar calendar = new GregorianCalendar();
		calendar.set(new Integer(2009),new Integer(6), new Integer(1));
        Date start = calendar.getTime();
        calendar.set(new Integer(2009),new Integer(6), new Integer(30));
        Date end = calendar.getTime();
        
        prepare.createProject("Projekt 1", "PIE.09.001-01", start, end, "My Description", "My additional Notes", "Stocksreiter",
        		new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1));
	}
	
	/******************************************
	 * Projects Testcase Nr. 3.12
	 * Method tests if it is possible to save
	 * a Project when unusual project names 
	 * (e.g. long names) is indicated.
	 ******************************************/
	@Test
	public void testUnusualData() throws Exception
]]>
</codefragment>
</duplication>
<duplication lines="83" tokens="236">
<file line="723" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandler.java"/>
<file line="778" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandler.java"/>
<codefragment>
<![CDATA[
	}
	
	//@Override
	public HtmlDataTable getSymbolUiTable() {
		return symbolHandler.getUiTable();
	}
	
	//@Override
	public void setSymbolUiTable(HtmlDataTable table) {
		symbolHandler.setUiTable(table);		
	}

	//@Override
	public void symbolOnUiChange(ValueChangeEvent e) {
		symbolHandler.onUiChange(e);
	}

	//@Override
	public int getSymbolUiSelectedRow() {
		return symbolHandler.getUiSelectedRow();
	}

	//@Override
	public void setSymbolUiSelectedRow(int selectedRow) {
		symbolHandler.setUiSelectedRow(selectedRow);
	}

	
	//@Override
	public void geometryOnUiChange(ValueChangeEvent e) {
		geometryHandler.onUiChange(e);		
	}

	//@Override
	public int getGeometryUiSelectedRow() {
		return geometryHandler.getUiSelectedRow();
	}

	//@Override
	public HtmlDataTable getGeometryUiTable() {
		return geometryHandler.getUiTable();
	}

	//@Override
	public void setGeometryUiSelectedRow(int selectedRow) {
		geometryHandler.setUiSelectedRow(selectedRow);
	}

	//@Override
	public void setGeometryUiTable(HtmlDataTable table) {
		geometryHandler.setUiTable(table);
	}

	//@Override
	public String getDataSheetErrorMessage() {
		return dataSheetHandler.getErrorMessage();
	}

	//@Override
	public String getDataSheetFilter() {
		return dataSheetHandler.getFilter();
	}

	//@Override
	public List<DataSheet> getDataSheetNames() {
		return dataSheetHandler.getNames();
	}

	//@Override
	public String getDataSheetSelectType() {
		return dataSheetHandler.getSelectType();
	}

	//@Override
	public List<SelectItem> getDataSheetSelectTypes() {
		return dataSheetHandler.getSelectTypes();
	}

	//@Override
	public String getDataSheetSelectedName() {
		if ("Existing".equals(getDataSheetSelectType()))
			return getExistingDataSheetName();
		else if ("New".equals(getDataSheetSelectType()))
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="232">
<file line="20" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataAllowedValues.java"/>
<file line="20" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<codefragment>
<![CDATA[
public class EditProjectDataWrongValues extends SeleneseTestCase
{
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		// log in
		login = new LogInHelper();
		login.logIn(selenium);
		
		prepare = new SeleniumTestPreparation();
		
		// drop existing projects and projectMemberships
		prepare.removeAllProjectsAndMemberships();
		
		// create only the needed project 
		prepareProjectData();
	}
	
	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareProjectData() throws DataConstraintException
	{
		Calendar calendar = new GregorianCalendar();
		calendar.set(new Integer(2009),new Integer(6), new Integer(1));
        Date start = calendar.getTime();
        calendar.set(new Integer(2009),new Integer(6), new Integer(30));
        Date end = calendar.getTime();
        
        // Projekt 1
        prepare.createProject("Projekt 1", "PIE.09.001-01", start, end, "My Description", "My additional Notes", "Stocksreiter",
        		new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1), new BigDecimal(1));
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="231">
<file line="503" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="620" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
				
			BigDecimal price = new BigDecimal("12345.00");
			
			//create offer
			Offer offer = new Offer("offerNumber", Offer.STATE_AVAILABLE, 7, 3,price,offerComment,distr1,man1,partRE_00002);
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="228">
<file line="720" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="811" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
	public void allLatestDrawing()
	{
		final DrawingDao drdao = new DrawingDaoHibernateImpl(this.em);
		
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		try
		{
			final String dNumber1 = "drawingNumber1";
			final String geo1 = "geometry1";
			final String geo2 = "geometry2";
			
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry(geo1,"gmt", "geo_comment", geometryData );
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="227">
<file line="179" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="755" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry2 = new Geometry(geo2,"gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry2);
			final Geometry tempGeometry3 = new Geometry("geometry3","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry3);
								
			final at.fhj.itm.persistence.Map tempMap1 = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap1);
			final at.fhj.itm.persistence.Map tempMap2 = new at.fhj.itm.persistence.Map("themap2", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap2);
			final at.fhj.itm.persistence.Map tempMap3 = new at.fhj.itm.persistence.Map("themap3", "mmt", "map_comment", mapData);
			filedao.makePersistent(tempMap3);
			
			final DrawingFile tempDrawingFile1 = new DrawingFile("dFile1", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile1);
			final DrawingFile tempDrawingFile2 = new DrawingFile("dFile2", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile2);
			final DrawingFile tempDrawingFile3 = new DrawingFile("dFile3", "dfmt", "drawing_comment", drawingFile);
			filedao.makePersistent(tempDrawingFile3);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol1, tempGeometry1, tempMap1, tempDrawingFile1);
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="225">
<file line="442" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="503" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
			
			BigDecimal price = new BigDecimal("12345.00");
				
			//create offer
			Offer offer = new Offer("offerNumber", Offer.STATE_AVAILABLE, minNumberOfPieces, 50, price,"offerComment",distr1,man1,partRE_00002);
]]>
</codefragment>
</duplication>
<duplication lines="62" tokens="225">
<file line="40" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="26" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
public class DrawingTest extends TestHelper
{
	
	private byte[] mapData = new byte[400];
	private byte[] geometryData = new byte[400];
	private byte[] symbolData = new byte[400];
	private byte[] drawingFile = new byte[400];
	private byte[] qualityDocument = new byte[400];
	
	
	@Before
	public void setUp()
	{
		renewSchema();
        createEntityManager();
	}
	
	@After
	public void tearDown() 
	{
		closeEntityManager();
	}

	
	/**
	 * byte Arrays used in several methods
	 */
	
	public void createByteArrays()
	{
		geometryData = new byte[3];
		geometryData[0]='a';
		geometryData[1]='b';
		geometryData[2]='c';
		
		mapData = new byte[3];
		mapData[0]='d';
		mapData[1]='e';
		mapData[2]='f';
		
		symbolData = new byte[3];
		symbolData[0]='g';
		symbolData[1]='h';
		symbolData[2]='i';
		
		drawingFile = new byte[3];
		drawingFile[0]='j';
		drawingFile[1]='k';
		drawingFile[2]='l';
		
		qualityDocument = new byte[3];
		qualityDocument[0]='m';
		qualityDocument[1]='n';
		qualityDocument[2]='o';
	}
	
	/**
	 * basicCreation
	 */
	@Test
	public void basicCreation()
	{
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="219">
<file line="442" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="861" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
				
			BigDecimal price = new BigDecimal("12345.00");
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="219">
<file line="220" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<file line="283" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<codefragment>
<![CDATA[
	public void removeDataSheet() throws DataConstraintException
	{
		final DataSheetDao ddao = new DataSheetDaoHibernateImpl(this.em);
		//final PartProductionDao ppdao = new PartProductionDaoHibernateImpl(this.em);
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final String sheet_title1="sheet_title1";
		try
		{
			ddao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			byte[] byteArray2 = new byte[3];
			byteArray2[0]='x';
			byteArray2[1]='y';
			byteArray2[2]='z';
			
			DataSheet sheet1 = new DataSheet(sheet_title1, "sheet_mime_type1", "pfix1", byteArray);
			DataSheet sheet2 = new DataSheet("sheet_title2", "sheet_mime_type2", "pfix2", byteArray2);
			DataSheet sheet3 = new DataSheet("sheet_title3", "sheet_mime_type3", "pfix3", byteArray);
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,sheet1);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
			ddao.makePersistent(sheet1);
			ddao.makePersistent(sheet2);
			ddao.makePersistent(sheet3);
			
			ddao.detachAndBegin();
			gdao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="213">
<file line="234" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="290" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
		final String offerComment = null;
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(man1);
			this.em.persist(distr1);
			this.em.flush();
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="211">
<file line="442" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="563" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="211">
<file line="116" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsAdministrator.java"/>
<file line="87" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsApprover.java"/>
<codefragment>
<![CDATA[
			"Projects:AddProject", 15));
		assertTrue("Navigation not present", SeleniumTestHelper.waitForElementAndAssert(selenium,
				"Projects:ViewProjectsImg", 15));
		assertTrue("Navigation not present", SeleniumTestHelper.waitForElementAndAssert(selenium,
				"Projects:ViewProjects", 15));
		// 3
		selenium.click("Projects:ViewProjectsImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"You are here: Home | Projects | View Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 1"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 2"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 3"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 4"));
		// 4
		selenium.click("breadcrumbs:Home");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Welcome to the CaDDaT Web-Interface!"));
		// 5
		selenium.click("leftNavigation:ViewProjects");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
				"You are here: Home | Projects | View Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 1"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 2"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 3"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, 
			"Projekt 4"));
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="203">
<file line="859" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="936" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
	public void referManufacturer()
	{
		try
		{
			this.beginTransaction();
			
			//group, part and distributor  for initialization
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.flush();
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="202">
<file line="174" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="445" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			

			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
			
			BigDecimal price = new BigDecimal("12345.00");
			
			//create offer
			Offer offer = new Offer(offerNumber,Offer.STATE_AVAILABLE, 100, 50, price,"offerComment",distr1,man1,partRE_00002);
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="201">
<file line="174" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="864" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
				
			BigDecimal price = new BigDecimal("12345.00");
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="200">
<file line="442" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="938" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			
			//group, part and distributor  for initialization
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.flush();
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="197">
<file line="299" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="395" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			this.beginTransaction();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(man1);
			this.em.persist(distr1);
			this.em.flush();
			
			BigDecimal price = new BigDecimal("12345.00");
			
			//create offer
			Offer offer = new Offer("offerNumber", Offer.STATE_AVAILABLE, 100, 50, price,offerComment,distr1,man1,null);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="196">
<file line="431" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="733" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			Part part3 = new Part("RE_00003","part RE_00003 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry(geo2,"gmt", "geo_comment", geometryData );
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="194">
<file line="235" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="442" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			

			this.em.persist(distr1);
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="193">
<file line="174" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="566" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(man1);
			this.em.flush();
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="193">
<file line="167" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DataSheetAddHandler.java"/>
<file line="132" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DataSheetEditHandler.java"/>
<codefragment>
<![CDATA[
	}
	
	
	//@Override
	public List<DataSheet> getNames() {
		List<DataSheet> symList = dataSheetDao.findAllDrawingDatasheets();
		List<DataSheet> retval = new ArrayList<DataSheet>();
		
		try {
			String realFilter = this.getFilter().isEmpty()?".*":this.getFilter().replaceAll("[.]", "[.]").replaceAll("[*]", ".*");

			for(DataSheet dataSheet : symList)
			{
				if ( dataSheet.getTitle().matches(realFilter) )
					retval.add(dataSheet);
			}
		} catch (Exception e) {
			setErrorMessage("Invalid characters in search string.");
		}
		
		return retval;
	}

	public DataSheetDao getDataSheetDao() {
		return dataSheetDao;
	}

	public void setDataSheetDao(DataSheetDao dataSheetDao) {
		this.dataSheetDao = dataSheetDao;
	}

	public DataSheet getDataSheet() {
		return dataSheet;
	}

	public void setDataSheet(DataSheet dataSheet) {
		this.dataSheet = dataSheet;
	}

	//@Override
	public void onUiChange(ValueChangeEvent e) {
		dataSheet = (DataSheet)uiTable.getRowData();
		uiSelectedRow = uiTable.getRowIndex();
		setExistingName(dataSheet.getTitle());
	}
]]>
</codefragment>
</duplication>
<duplication lines="70" tokens="191">
<file line="807" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandler.java"/>
<file line="863" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandler.java"/>
<codefragment>
<![CDATA[
		return getCurrentDataSheetName();
	}

	//@Override
	public String getExistingDataSheetName() {
		return dataSheetHandler.getExistingName();
	}

	//@Override
	public byte[] getUploadedDataSheetFile() {
		return dataSheetHandler.getUploadedFile();
	}

	//@Override
	public String getUploadedDataSheetMimeType() {
		return dataSheetHandler.getUploadedMimeType();
	}

	//@Override
	public String getUploadedDataSheetName() {
		return dataSheetHandler.getUploadedName();
	}

	//@Override
	public void setDataSheetErrorMessage(String dataSheetErrorMessage) {
		dataSheetHandler.setErrorMessage(dataSheetErrorMessage);
	}

	//@Override
	public void setDataSheetFilter(String filter) {
		dataSheetHandler.setFilter(filter);		
	}

	//@Override
	public void setDataSheetSelectType(String selectType) {
		dataSheetHandler.setSelectType(selectType);
	}

	//@Override
	public void setExistingDataSheetName(String name) {
		dataSheetHandler.setExistingName(name);
	}

	//@Override
	public void setUploadedDataSheetFile(byte[] file) {
		dataSheetHandler.setUploadedFile(file);
	}

	//@Override
	public void setUploadedDataSheetMimeType(String mimeType) {
		dataSheetHandler.setUploadedMimeType(mimeType);
	}

	//@Override
	public void setUploadedDataSheetName(String name) {
		dataSheetHandler.setUploadedName(name);
	}

	//@Override
	public boolean showDataSheetAddExisting() {
		return dataSheetHandler.getShowAddExisting();
	}

	//@Override
	public boolean showDataSheetAddNew() {
		return dataSheetHandler.getShowAddNew();
	}

	//@Override
	public boolean showDataSheetKeepCurrent() {
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="189">
<file line="138" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorDaoTest.java"/>
<file line="372" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findDistributorsByIdList() throws DataConstraintException
	{
		final DistributorDao ddao = new DistributorDaoHibernateImpl(this.em);
		final DistributorAddressDao dadao = new DistributorAddressDaoHibernateImpl(this.em);
		
		try
		{
			List<DistributorAddress> addresses1 = new ArrayList<DistributorAddress>();
			List<DistributorAddress> addresses2 = new ArrayList<DistributorAddress>();
			
			ddao.begin();
			Distributor distr1 = new Distributor("distr_name1","distr_homepage1","distr_comment1","distr_contactPerson1",addresses1,"distr_phone1","distr_fax1","distr_mail1");
			Distributor distr2 = new Distributor("distr_name2","distr_homepage2","distr_comment2","distr_contactPerson2",addresses2,"distr_phone2","distr_fax2","distr_mail2");
			
			ddao.makePersistent(distr1);
			ddao.makePersistent(distr2);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses1.add(addr1);
			distr1.setAddresses(addresses1);
			dadao.makePersistent(addr1);
			
			DistributorAddress addr2 = new DistributorAddress("new Addresss", distr2);
			addresses2.add(addr2);
			distr2.setAddresses(addresses2);
			dadao.makePersistent(addr2);
			
			ddao.makePersistent(distr1);
			ddao.makePersistent(distr2);
			
			ddao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="187">
<file line="53" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="110" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findAllAvailabilityChecks()
	{
		final AvailabilityCheckDao adao = new AvailabilityCheckDaoHibernateImpl(this.em);
		
		try
		{
			adao.begin();
			
			// creation of part
			final ProductGroupDao pgroupDao = new ProductGroupDaoHibernateImpl(this.em);
			final PartDao partDao = new PartDaoHibernateImpl(this.em);
			
			final ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			
			// groupCP.getParts().add(part1);
			final Part partOS_00001 = new Part("OS_00001","Description" , Part.STATUS_PART, groupOS, null);
			final Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
						
			final StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			final StringProperty propvalue = new StringProperty("Value", "Value Description");
			groupOS.getProperties().add(propdrawing);
			groupOS.getProperties().add(propvalue);
			new StringPropertyValue("10014", propdrawing, partOS_00001);
			new StringPropertyValue("10014", propdrawing, partOS_00002);
			new StringPropertyValue("10014", propvalue, partOS_00001);
			new StringPropertyValue("10014", propvalue, partOS_00002);
							
			pgroupDao.makePersistent(groupOS);
			
			User user1 = this.createUser();
			
			// availability Check
			final AvailabilityCheck avcheck1 = new AvailabilityCheck(100, "comment_owner1", "comment_purchaser1", user1, partOS_00001);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="185">
<file line="127" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ManufacturerDaoTest.java"/>
<file line="350" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ManufacturerDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findManufacturersByIdList()
	{
		final ManufacturerDao mdao = new ManufacturerDaoHibernateImpl(this.em);
		final ManufacturerAddressDao manadao = new ManufacturerAddressDaoHibernateImpl(this.em);
		try
		{
			mdao.begin();
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			List<ManufacturerAddress> addresses2 = new ArrayList<ManufacturerAddress>();
			Manufacturer manu1 = new Manufacturer("manu_1_name", "manu_1_description", "manu_1_homepage", "manu_1_comment", "email", "telephone", addresses1, "fax", "contact");
			Manufacturer manu2 = new Manufacturer("manu_2_name", "manu_2_description", "manu_2_homepage", "manu_2_comment", "email", "telephone", addresses2, "fax", "contact");
			
			mdao.makePersistent(manu1);
			mdao.makePersistent(manu2);
			
			ManufacturerAddress addr1 = new ManufacturerAddress("new Address", manu1);
			addresses1.add(addr1);
			manu1.setAddresses(addresses1);
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", manu2);
			addresses2.add(addr2);
			
			manadao.makePersistent(addr1);
			manadao.makePersistent(addr2);
			
			mdao.makePersistent(manu1);
			mdao.makePersistent(manu2);
			
			mdao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="183">
<file line="14" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsDesigner.java"/>
<file line="14" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsLibrarian.java"/>
<file line="14" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsPurchaser.java"/>
<codefragment>
<![CDATA[
public class PermissionsPurchaser extends SeleneseTestCase
{
	private final static String[] NEEDED_USERS = {"designer", "librarian", "purchaser"};
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		login = new LogInHelper();
		prepare = new SeleniumTestPreparation();
		
		// activate the needed users
		prepare.activateNeededUsersOnly(NEEDED_USERS);
		
		prepare.removeAllProjectsAndMemberships();
		prepareProjectData();
	}

	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareProjectData() throws DataConstraintException
	{
        prepare.createProject("Projekt 1", "PIE.01.001-01", "librarian");
        prepare.createProject("Projekt 2", "PIE.01.001-02", "designer");
        prepare.createProject("Projekt 3", "PIE.01.001-03", "purchaser");
        prepare.createProject("Projekt 4", "PIE.01.001-04", "librarian");
	}
	
	/******************************************
	 * Projects Testcase Nr. 5.5
	 * Method tests if a user with the role
	 * "purchaser" is allowed to add a new
	 * project and view all existing projects.
	 ******************************************/
	@Test
	public void testCheckPermissionsAddView() throws Exception
	{
		// 1 - log in as Purchaser
		login.logIn(selenium,"purchaser", "purchaser");
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="182">
<file line="51" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="153" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
	private void basicWildcardSetup()
	{
		try
		{
			this.beginTransaction();
			ProductGroup group1 = new ProductGroup("RE", "Resistors", "Resistordescripton");
			Part part1 = new Part("RE_00001", "Resistor 0R 1% RC0603", Part.STATUS_PART, group1, null);
			Part part2 = new Part("RE_00002", "Resistor 0R 2% RC0603", Part.STATUS_PART, group1, null);
			Part part3 = new Part("RE_00003", "Aesistor 0R 2% RC0603", Part.STATUS_PART, group1, null);
			StringProperty prop1 = new StringProperty("Value", "");
			StringProperty prop2 = new StringProperty("Toler", "Tolers Description");
			group1.getProperties().add(prop1);
			group1.getProperties().add(prop2);
			StringPropertyValue val1 = new StringPropertyValue("0R", prop1, part1);
			StringPropertyValue val2 = new StringPropertyValue("1R5", prop1, part2);
			StringPropertyValue val3 = new StringPropertyValue("2R2", prop1, part3);
			StringPropertyValue val4 = new StringPropertyValue("1%", prop2, part1);
			StringPropertyValue val5 = new StringPropertyValue("1%", prop2, part2);
			StringPropertyValue val6 = new StringPropertyValue("12%", prop2, part3);
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="182">
<file line="174" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="943" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.flush();
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="182">
<file line="14" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsAdministrator.java"/>
<file line="14" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsDesigner.java"/>
<codefragment>
<![CDATA[
public class PermissionsDesigner extends SeleneseTestCase
{
	private final static String[] NEEDED_USERS = {"designer", "librarian", "purchaser"};
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		login = new LogInHelper();
		prepare = new SeleniumTestPreparation();
		
		// activate the needed users
		prepare.activateNeededUsersOnly(NEEDED_USERS);
		
		prepare.removeAllProjectsAndMemberships();
		prepareProjectData();
	}

	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareProjectData() throws DataConstraintException
	{
        prepare.createProject("Projekt 1", "PIE.01.001-01", "librarian");
        prepare.createProject("Projekt 2", "PIE.01.001-02", "designer");
        prepare.createProject("Projekt 3", "PIE.01.001-03", "purchaser");
        prepare.createProject("Projekt 4", "PIE.01.001-04", "librarian");
	}
	
	/******************************************
	 * Projects Testcase Nr. 5.3
	 * Method tests if a user with the role
	 * "designer" is allowed to add a new
	 * project and view all existing projects.
	 ******************************************/
	@Test
	public void testCheckPermissionsAddView() throws Exception
	{
		// 1 - log in as Designer
		login.logIn(selenium,"designer", "designer");
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="176">
<file line="174" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="238" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			em.persist(groupRE);
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(man1);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="172">
<file line="460" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="675" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="714" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
	public void findAndCompareData()
	{
		final String drawingNumber ="my drawing number";
		this.createByteArrays(); // sets the data arrays
		try
		{
			this.beginTransaction();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing(drawingNumber, "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing);
			em.flush();
			this.em.clear();
			
			Drawing drawing_new = em.find(Drawing.class,1L);

			assertEquals("Expected and actual GeometryData is not the same",geometryData[0], drawing_new.getGeometry().getDataLazy(em)[0]);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="171">
<file line="292" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartDaoTest.java"/>
<file line="651" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartDaoTest.java"/>
<codefragment>
<![CDATA[
		final OfferDao offerDao = new OfferDaoHibernateImpl(this.em);
		final DistributorAddressDao distaDao = new DistributorAddressDaoHibernateImpl(this.em);
		
		final String distributor1_name = "Name of Distrubutor 1";
		final String distributor2_name = "Name of Distributor 2";
		try
		{
			this.beginTransaction();
			
			List<DistributorAddress> addresses1 = new ArrayList<DistributorAddress>();
			List<DistributorAddress> addresses2 = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor(distributor1_name, "distr1_homepage", "distr1_comment","distr1_contact_person",addresses1,"distr1_phone","distr1_fax","distr1_mail");
			Distributor distr2 = new Distributor(distributor2_name, "distr2_homepage", "distr2_comment","distr2_contact_person",addresses2,"distr2_phone","distr2_fax","distr2_mail");
			distrDao.makePersistent(distr1);
			distrDao.makePersistent(distr2);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses1.add(addr1);
			distr1.setAddresses(addresses1);
			distaDao.makePersistent(addr1);
			
			DistributorAddress addr2 = new DistributorAddress("new Addresss", distr2);
			addresses1.add(addr2);
			distr2.setAddresses(addresses2);
			distaDao.makePersistent(addr2);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="170">
<file line="718" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartDaoTest.java"/>
<file line="774" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartDaoTest.java"/>
<codefragment>
<![CDATA[
	public void getPropertyNames()//property names if part has a property value for this property
	{	
		final ProductGroupDao pgroupDao = new ProductGroupDaoHibernateImpl(this.em);
		final PartDao partDao = new PartDaoHibernateImpl(this.em);
		
		final String distributor1_name = "Name of Distrubutor 1";
		final String distributor2_name = "Name of Distributor 2";
		try
		{
			this.beginTransaction();

			ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			ProductGroup groupCP = new ProductGroup("CP","Polar Capacitors", "Tantal, Aluminium, etc.");
					
			Part partOS_00001 = new Part("OS_00001",part_OS_00001_description , Part.STATUS_PART, groupOS, null);
			Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
			Part partCP_00001 = new Part("CP_00001", "Tantal Cap 10uF 10V TC_A", Part.STATUS_PART, groupCP, null);

			
			StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			StringProperty propvalue = new StringProperty("Value", "Value Description");
			groupCP.getProperties().add(propdrawing);
			groupCP.getProperties().add(propvalue);
			
			StringPropertyValue val1 = new StringPropertyValue("10014", propdrawing, partCP_00001);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="170">
<file line="460" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="769" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
	public void addDataSheet()
	{
		final String drawingNumber ="my drawing number";
		this.createByteArrays();
		try
		{
			this.beginTransaction();
			
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing(drawingNumber, "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing);
			em.flush();
			this.em.clear();
		
			
			Drawing drawing_new = em.find(Drawing.class,1L);
]]>
</codefragment>
</duplication>
<duplication lines="49" tokens="169">
<file line="74" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\pricegroup\unittest\PriceGroupDAOTest.java"/>
<file line="77" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\pricegroup\unittest\PriceGroupSubDAOTest.java"/>
<codefragment>
<![CDATA[
			pDao.flush();
			

		}
		catch(DataConstraintException exc)
		{
			assertTrue(exc.getMessage(), false); // causes the test to fail
		}
		finally
		{
			this.commitTransaction();
		}	
	}
	
	private void setupADistributor()
	{
		try
		{
			this.beginTransaction();

			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			
			dist = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			this.em.persist(dist);

			DistributorAddress addr1 = new DistributorAddress("new Addresss", dist);
			addresses.add(addr1);
			dist.setAddresses(addresses);
			
			this.em.persist(addr1);
			DistributorDao distDao =  new DistributorDaoHibernateImpl(this.em);
			distDao.makePersistent(dist);
		}
		catch(DataConstraintException exc)
		{
			assertTrue(exc.getMessage(), false); // causes the test to fail
		}
		finally
		{
			this.commitTransaction();
		}	
	}
	
	private void setupAfewPricegroups()
	{
		try
		{
			this.beginTransaction();
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="167">
<file line="1099" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="1245" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			final Map<String, String> propValMapping = new HashMap<String, String>();
			propValMapping.put(propName, propValue);
			
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(3,resultingParts.size());
			List<String> resultList = new ArrayList<String>( Arrays.asList("RE_00001", "RE_00002", "RE_00003") );//the expected values
			
			for(Part part : resultingParts)
			{
				System.out.println("Found part with part number: " + part.getPartNumber());
				for(String partNum : resultList)
				{
					System.out.println("Result List: " + partNum);
				}
				boolean ok = resultList.remove(part.getPartNumber());
				assertTrue(ok);
			}
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * check percentage
	 */
	@Test
	public void checkPercentageIsNoWildcard()
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="167">
<file line="281" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="324" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
			final User approver1 = this.createUser();
			
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Approval appr = new Approval("The approval comment", true, approver1, drawing1);
			em.persist(appr);
			
			this.detachAndBegin();
			
			Approval appr_new = em.find(Approval.class,1L);
]]>
</codefragment>
</duplication>
<duplication lines="56" tokens="166">
<file line="16" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsApprover.java"/>
<file line="16" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsDesigner.java"/>
<file line="16" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsReviewer.java"/>
<codefragment>
<![CDATA[
	private final static String[] NEEDED_USERS = {"designer", "librarian", "purchaser", "reviewer"};
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		login = new LogInHelper();
		prepare = new SeleniumTestPreparation();
		
		// activate the needed users
		prepare.activateNeededUsersOnly(NEEDED_USERS);
		
		prepare.removeAllProjectsAndMemberships();
		prepareProjectData();
	}

	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareProjectData() throws DataConstraintException
	{
        prepare.createProject("Projekt 1", "PIE.01.001-01", "librarian");
        prepare.createProject("Projekt 2", "PIE.01.001-02", "designer");
        prepare.createProject("Projekt 3", "PIE.01.001-03", "purchaser");
        prepare.createProject("Projekt 4", "PIE.01.001-04", "librarian");
	}
	
	/******************************************
	 * Projects Testcase Nr. 5.9
	 * Method tests if a user with the role
	 * "reviewer" is allowed to add a new
	 * project and view all existing projects.
	 ******************************************/
	@Test
	public void testCheckPermissionsAddView() throws Exception
	{
		// 1 - log in as Reviewer
		login.logIn(selenium,"reviewer", "reviewer");
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="165">
<file line="243" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="395" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			this.beginTransaction();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(man1);
			this.em.persist(distr1);
			this.em.flush();
]]>
</codefragment>
</duplication>
<duplication lines="57" tokens="165">
<file line="16" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsAdministrator.java"/>
<file line="16" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsApprover.java"/>
<codefragment>
<![CDATA[
	private final static String[] NEEDED_USERS = {"designer", "librarian", "purchaser", "approver"};
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);

		login = new LogInHelper();
		prepare = new SeleniumTestPreparation();
		
		// activate the needed users
		prepare.activateNeededUsersOnly(NEEDED_USERS);
		
		prepare.removeAllProjectsAndMemberships();
		prepareProjectData();
	}

	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareProjectData() throws DataConstraintException
	{
        prepare.createProject("Projekt 1", "PIE.01.001-01", "librarian");
        prepare.createProject("Projekt 2", "PIE.01.001-02", "designer");
        prepare.createProject("Projekt 3", "PIE.01.001-03", "purchaser");
        prepare.createProject("Projekt 4", "PIE.01.001-04", "librarian");
	}
	
	/******************************************
	 * Projects Testcase Nr. 5.11
	 * Method tests if a user with the role
	 * "approver" is allowed to add a new
	 * project and view all existing projects.
	 ******************************************/
	@Test
	public void testCheckPermissionsAddView() throws Exception
	{
		
		// 1 - log in as Approver
		login.logIn(selenium,"approver", "approver");
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="164">
<file line="208" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\NavigationAddProject.java"/>
<file line="227" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\NavigationAddProject.java"/>
<codefragment>
<![CDATA[
		selenium.click("ProjectMemberAdd:Cancel");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You can choose one of the following tasks:"));
		selenium.click("Projects:AddProjectImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "This wizard leads you through the process of generating a new Project."));
		selenium.click("ProjectAddMain:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 1 of 4: Input Project Data"));
		selenium.type("ProjectsData:ProjectName", "Projekt 1");
		selenium.click("ProjectsData:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 2 of 4: Define Project Leader"));
		selenium.click("ProjectLeaderAdd:userList:0");
		selenium.click("ProjectLeaderAdd:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 3 of 4: Select Project Members"));
		selenium.click("ProjectMemberAdd:Next");
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="162">
<file line="141" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorDaoTest.java"/>
<file line="258" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorDaoTest.java"/>
<codefragment>
<![CDATA[
		final ManufacturerAddressDao manadao = new ManufacturerAddressDaoHibernateImpl(this.em);
		
		try
		{
			List<DistributorAddress> addresses1 = new ArrayList<DistributorAddress>();
			List<DistributorAddress> addresses2 = new ArrayList<DistributorAddress>();
			ddao.begin();
			Distributor distr1 = new Distributor("distr_name1","distr_homepage1","distr_comment1","distr_contactPerson1",addresses1,"distr_phone1","distr_fax1","distr_mail1");
			Distributor distr2 = new Distributor("distr_name2","distr_homepage2","distr_comment2","distr_contactPerson2",addresses2,"distr_phone2","distr_fax2","distr_mail2");
			
			ddao.makePersistent(distr1);
			ddao.makePersistent(distr2);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses1.add(addr1);
			distr1.setAddresses(addresses1);
			dadao.makePersistent(addr1);
			
			DistributorAddress addr2 = new DistributorAddress("new Addresss", distr2);
			addresses2.add(addr2);
			distr2.setAddresses(addresses2);
			dadao.makePersistent(addr2);
			
			ddao.makePersistent(distr1);
			ddao.makePersistent(distr2);
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="162">
<file line="1103" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\PartHandler.java"/>
<file line="300" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartViewTest.java"/>
<codefragment>
<![CDATA[
	}

	/*
	 * Drawing Names
	 * (non-Javadoc)
	 * @see at.fhj.itm.business.PartBean#
	 */
	public String getUploadedNameGeometry() 
	{
		return getFileBean().getUploadedNameGeometry();
	}
	public void setUploadedNameGeometry(String uploadedNameGeometry) 
	{
		getFileBean().setUploadedNameGeometry(uploadedNameGeometry);
	}
	public String getUploadedNameMap() 
	{
		return getFileBean().getUploadedNameMap();
	}
	public void setUploadedNameMap(String uploadedNameMap)
	{
		getFileBean().setUploadedNameMap(uploadedNameMap);
	}
	public String getUploadedNameQuality()
	{
		return getFileBean().getUploadedNameQuality();
	}
	public void setUploadedNameQuality(String uploadedNameQuality) 
	{
		getFileBean().setUploadedNameQuality(uploadedNameQuality);
	}
	public String getUploadedNameSymbol()
	{
		return getFileBean().getUploadedNameSymbol();
	}
	public void setUploadedNameSymbol(String uploadedNameSymbol)
	{
		getFileBean().setUploadedNameSymbol(uploadedNameSymbol);
	}
	public String getUploadedNameDrawingFile() 
	{
		return getFileBean().getUploadedNameDrawingFile();
	}
	public void setUploadedNameDrawingFile(String uploadedNameDrawingFile)
	{
		getFileBean().setUploadedNameDrawingFile(uploadedNameDrawingFile);
	}

	//@Override
	public void setSelf(DrawingOfPartHandlerInt handler) {
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="159">
<file line="35" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetTest.java"/>
<file line="190" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetTest.java"/>
<codefragment>
<![CDATA[
	public void findAndCompareSheetTitle() throws DataConstraintException
	{
		final String sheet_title1="sheet_title1";
		try
		{
			this.beginTransaction();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			byte[] byteArray2 = new byte[3];
			byteArray2[0]='x';
			byteArray2[1]='y';
			byteArray2[2]='z';
			
			DataSheet sheet1 = new DataSheet(sheet_title1, "sheet_mime_type1", "pfix1", byteArray);
			DataSheet sheet2 = new DataSheet("sheet_title2", "sheet_mime_type2", "pfix2", byteArray2);
			DataSheet sheet3 = new DataSheet("sheet_title3", "sheet_mime_type3", "pfix3", byteArray);
			this.em.persist(sheet1);
			this.em.persist(sheet2);
			this.em.persist(sheet3);
			
			this.detachAndBegin();
			
			DataSheet newSheet = this.em.find(DataSheet.class, 1L);
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="159">
<file line="71" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandlerInt.java"/>
<file line="73" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandlerInt.java"/>
<codefragment>
<![CDATA[
	public String getSymbolUrl(long id);
	
	//handling the ui changes for the DataTable
	public HtmlDataTable getSymbolUiTable();
	public void setSymbolUiTable(HtmlDataTable table);
	
	public void symbolOnUiChange(ValueChangeEvent e);
	
	public int getSymbolUiSelectedRow();
	public void setSymbolUiSelectedRow(int selectedRow);
	
	
	//Geometry Properties & Methods
	public String getExistingGeometryName();
	public void setExistingGeometryName(String name);
	
	public String getUploadedGeometryName();
	public void setUploadedGeometryName(String name);
	
	public String getUploadedGeometryMimeType();
	public void setUploadedGeometryMimeType(String mimeType);
	
	public byte[] getUploadedGeometryFile();
	public void setUploadedGeometryFile(byte[] file);
	
	public List<File> getGeometryNames();
	
	public String checkInputGeometry() throws DataConstraintException;
	
	public String getGeometryErrorMessage();
	public void setGeometryErrorMessage(String geometryErrorMessage);
	
	public String getGeometryFilter();
	public void setGeometryFilter(String filter);
	
	public List<SelectItem> getGeometrySelectTypes();
	
	public String getGeometrySelectType();
	public void setGeometrySelectType(String selectType);
	public String getGeometrySelectedName();
	
	public boolean showGeometryAddNew();
	public boolean showGeometryAddExisting();
	
	public String getGeometryUrl(long id);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="158">
<file line="195" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectLeader.java"/>
<file line="153" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectMembers.java"/>
<codefragment>
<![CDATA[
		assertEquals("ProjectMembers not like expected", "Neissl Gernot Netzberger Christian Okorn Robert Ulm Mike",
				selenium.getText("ProjectsData:ProjectMemberNames"));
	}
	
	/******************************************
	 * Projects Testcase Nr. 3.17
	 * Method does not change the project members
	 * and saves the project.
	 ******************************************/
	@Test
	public void testSaveDirectly() throws Exception
	{
		// 1
		selenium.click("leftNavigation:ManageProjects");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Manage Projects"));
		// 2
		selenium.click("ProjectsList:projectInfo:0:EditLeader");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Manage Projects | Change Project Leader"));
		// 3
		selenium.click("EditProjectLeader:save");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Projects"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You can choose one of the following tasks:"));
		// 4
		selenium.click("leftNavigation:ManageProjects");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Manage Projects"));
		assertEquals("Project leader not found", "Stocksreiter", selenium.getText("ProjectsList:projectInfo:0:leaderLastName"));
		assertEquals("Project leader not found", "Wolfgang", selenium.getText("ProjectsList:projectInfo:0:leaderFirstName"));
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="157">
<file line="58" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="178" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			em.flush();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			
			this.em.persist(distr1);
			this.em.persist(man1);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="157">
<file line="88" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\business\unittest\PartViewHelperBeanTest.java"/>
<file line="57" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartTest.java"/>
<codefragment>
<![CDATA[
	public void persistParts()
	{
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
			Part partRE_00001 = new Part("RE_00001", "Resistor 0R 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00003 = new Part("RE_00003", "Resistor 2R2 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00004 = new Part("RE_00004", "Resistor 3R3 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00005 = new Part("RE_00005", "Resistor 4R7 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			ProductGroupDao pgDao = new ProductGroupDaoHibernateImpl(this.em);
			pgDao.makePersistent(groupRE);
		}
		catch(DataConstraintException exc)
		{
			assertTrue(exc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	

	@Test(expected=java.lang.AssertionError.class)
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="154">
<file line="71" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<file line="62" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetTest.java"/>
<codefragment>
<![CDATA[
			DataSheet newSheet3 = this.em.find(DataSheet.class, 3L);
			byte result1='a';
			byte result2='b';
			byte result3='c';
			byte result4='x';
			byte result5='y';
			byte result6='z';
			
			assertEquals(newSheet.getDataLazy(em)[0],result1);
			assertEquals(newSheet.getDataLazy(em)[1],result2);
			assertEquals(newSheet.getDataLazy(em)[2],result3);
			
			assertEquals(newSheet2.getDataLazy(em)[0],result4);
			assertEquals(newSheet2.getDataLazy(em)[1],result5);
			assertEquals(newSheet2.getDataLazy(em)[2],result6);
			
			assertEquals(newSheet3.getDataLazy(em)[0],result1);
			assertEquals(newSheet3.getDataLazy(em)[1],result2);
			assertEquals(newSheet3.getDataLazy(em)[2],result3);
		}	
		finally
		{
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="153">
<file line="98" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<file line="148" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findDataSheetsByFilter() throws DataConstraintException
	{
		final DataSheetDao ddao = new DataSheetDaoHibernateImpl(this.em);
		final String sheet_title1="sheet_title1";
		try
		{
			ddao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			byte[] byteArray2 = new byte[3];
			byteArray2[0]='x';
			byteArray2[1]='y';
			byteArray2[2]='z';
			
			DataSheet sheet1 = new DataSheet(sheet_title1, "sheet_mime_type1", "pfix1", byteArray);
			DataSheet sheet2 = new DataSheet("sheet_title2", "sheet_mime_type2", "pfix2", byteArray2);
			DataSheet sheet3 = new DataSheet("sheet_title3", "sheet_mime_type3", "pfix3", byteArray);
			ddao.makePersistent(sheet1);
			ddao.makePersistent(sheet2);
			ddao.makePersistent(sheet3);
			
			ddao.detachAndBegin();
			
			//new DataSheet(titel,mimeType,filePostFix,data)

			//Filter = title
			List<DataSheet> resultFtitle =ddao.findByFilter("title='sheet_title3'");
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="151">
<file line="27" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="26" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
public class ReviewTest extends TestHelper
{
	
	private byte[] mapData = new byte[400];
	private byte[] geometryData = new byte[400];
	private byte[] symbolData = new byte[400];
	private byte[] drawingFile = new byte[400];
	
	@Before
	public void setUp()
	{
		renewSchema();
        createEntityManager();
	}
	
	@After
	public void tearDown() 
	{
		closeEntityManager();
	}
	
	/**
	 * user creation
	 * called by several tests
	 */
	public User createUser()
	{
		final UserDAO userDAO = new UserDAO();
		userDAO.setEntityManager(this.em);
		final User egon = userDAO.create("eteiniker", "eteiniker", "Egon", "Teiniker");
		userDAO.insert(egon);
		return egon;
	}

	public User createUser2()
	{
		final UserDAO userDAO = new UserDAO();
		userDAO.setEntityManager(this.em);
		final User egon = userDAO.create("wzugaj", "wzugaj", "Wilhelm", "Zugaj");
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="149">
<file line="43" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<file line="98" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findAllDataSheets() throws DataConstraintException
	{
		final DataSheetDao ddao = new DataSheetDaoHibernateImpl(this.em);
		final String sheet_title1="sheet_title1";
		try
		{
			ddao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			byte[] byteArray2 = new byte[3];
			byteArray2[0]='x';
			byteArray2[1]='y';
			byteArray2[2]='z';
			
			DataSheet sheet1 = new DataSheet(sheet_title1, "sheet_mime_type1", "pfix1", byteArray);
			DataSheet sheet2 = new DataSheet("sheet_title2", "sheet_mime_type2", "pfix2", byteArray2);
			DataSheet sheet3 = new DataSheet("sheet_title3", "sheet_mime_type3", "pfix3", byteArray);
			ddao.makePersistent(sheet1);
			ddao.makePersistent(sheet2);
			ddao.makePersistent(sheet3);
			
			ddao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="148">
<file line="225" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="284" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			final User reviewer = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			final Review rev = new Review("theComment", true, reviewer, drawing1);
			em.persist(rev);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="148">
<file line="178" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="395" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			this.beginTransaction();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(man1);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="147">
<file line="74" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="323" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
	{
		try
		{
			this.beginTransaction();
			User reviewer = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Review rev = new Review("theComment", true, reviewer, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="147">
<file line="58" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<file line="395" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferTest.java"/>
<codefragment>
<![CDATA[
			this.beginTransaction();
			
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			
			em.persist(distr1);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses.add(addr1);
			distr1.setAddresses(addresses);
			em.persist(addr1);
			
			List<ManufacturerAddress> addresses1 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses1, "man_fax1", "man_contact1");
			
			em.persist(man1);
			
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", man1);
			addresses1.add(addr2);
			man1.setAddresses(addresses1);
			em.persist(addr2);
			
			this.em.persist(man1);
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="146">
<file line="324" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="362" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			User reviewer = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Review rev = new Review(comment, true, reviewer, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="146">
<file line="117" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="155" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			User reviewer1 = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Review rev = new Review(theComment, true, reviewer1, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="146">
<file line="75" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="362" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			User reviewer = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Review rev = new Review(comment, true, reviewer, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="146">
<file line="413" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandler.java"/>
<file line="418" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandler.java"/>
<codefragment>
<![CDATA[
	}
	
	/******************************
	 * Getters and Setters
	 ******************************/
	
	public String getComment()
	{
		return comment;
	}
	
	public void setComment(String comment)
	{
		this.comment = comment;
	}
	
	public String getExistingSymbolName()
	{
		return symbolHandler.getExistingName();
	}
	
	public void setExistingSymbolName(String name)
	{
		symbolHandler.setExistingName(name);
	}
	
	public String getExistingGeometryName()
	{
		return geometryHandler.getExistingName();
	}
	
	public void setExistingGeometryName(String name)
	{
		geometryHandler.setExistingName(name);
	}
	
	public String getExistingMapName()
	{
		return mapHandler.getExistingName();
	}
	
	public void setExistingMapName(String name)
	{
		mapHandler.setExistingName(name);
	}
	
	public byte[] getUploadedSymbolFile()
	{
		return symbolHandler.getUploadedFile();
	}
	
	public void setUploadedSymbolFile(byte[] file)
	{
		symbolHandler.setUploadedFile(file);
	}
	
	public String getUploadedSymbolName()
	{
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="144">
<file line="468" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="596" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol = new Symbol(symbol, "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing(drawingNumber, "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing);
			
			em.flush();
			this.em.clear();
			
			Drawing drawing_new = em.find(Drawing.class,1L);

			assertEquals("Expected and actual Symbol is not the same",symbol, drawing_new.getSymbol().getName());
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="144">
<file line="532" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\PartHandler.java"/>
<file line="91" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\AvailabilityViewHelper.java"/>
<codefragment>
<![CDATA[
		logger.info("startAvailabilityCheck()");
		// VALIDATION
		if(getNeededNumbers().equalsIgnoreCase(""))
		{
			facesMessages.add("You have to define a Needed Nr. of Pieces for an Availability Check!");
			return "EditPart";
		}
		setAvailabilityCheckOwner(user);
		setPurchaserComment("");
		try 
		{
			// EXECUTE Code
			int x = Integer.parseInt(getNeededNumbers());
			getAvailabilityCheckBean().startAvailabilityCheck(getNeededNumbers(), getOwnerComment(), getPurchaserComment(), getPart());
			setNeededNumbers("");
			setOwnerComment("");
		} // ERROR HANDLING
		catch (DataConstraintException e) 
		{
			e.printStackTrace();
		} 
		catch (NumberFormatException e)
		{
			facesMessages.add("Needed Nr. of Pieces has to be a Number!");
			return "EditPart";
		}
		catch(Exception e)
		{
			e.printStackTrace();
			facesMessages.add("Unknown Error");
			return "Error";
		}
		return "SendToCheckPart";
	}
	// AvailabilityCheck - get Information for a AvailabilityCheck
	public String availabilityCheck(AvailabilityCheck availabilityCheck)
	{
		logger.debug("availabilityCheck()");
		setAvailabilityCheck(availabilityCheck);
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="142">
<file line="1010" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="1100" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			propValMapping.put(propName, propValue);
			
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(3,resultingParts.size());
			List<String> resultList = new ArrayList<String>( Arrays.asList("RE_00001", "RE_00002", "RE_00003") );//the expected values
			
			for(Part part : resultingParts)
			{
				System.out.println("Found part with part number: " + part.getPartNumber());
				for(String partNum : resultList)
				{
					System.out.println("Result List: " + partNum);
				}
				boolean ok = resultList.remove(part.getPartNumber());
				assertTrue(ok);
			}
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * searchForTwoPropertyValues
	 */
	@Test
	public void searchForTwoPropertyValuesAtOnce()
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="142">
<file line="117" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="155" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="278" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="359" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			User approver1 = this.createUser();
			
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Approval appr = new Approval(comment, true, approver1, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="55" tokens="142">
<file line="220" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\persistence\DataSheet.java"/>
<file line="173" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\persistence\File.java"/>
<codefragment>
<![CDATA[
		this.setDataAttributeState(AttributeState.AttributeInitialized);
	}
	
	@Transient 
	private AttributeState getDataAttributeState(EntityManager em)
	{
		// save and restore the init flag
		boolean currentlyInit = this.myDataAttributeInitialized;
		this.myDataAttributeInitialized = true;
		
		if(em.contains(this))
		{
			if(this.isDataJPAManaged(em))
			{
				return AttributeState.AttributeManaged;
			}
			else
			{
				if(currentlyInit)
				{
					return AttributeState.AttributeInitialized;
				}
				else
				{
					// only in this case, the init flag is reset to false
					this.myDataAttributeInitialized = false;
					return AttributeState.AttributeUnInitialized;
				}
			}
		}
		else
		{
			return AttributeState.EntityDetached;
		}
	}
	
	private void setDataAttributeState(AttributeState state)
	{
		if(state == AttributeState.AttributeUnInitialized)
		{
			this.myDataAttributeInitialized=false;
		}
		else
		{
			this.myDataAttributeInitialized=true;
		}	
	}
	
	@Transient 
	private boolean isDataJPAManaged(EntityManager em)
	{
		return Hibernate.isPropertyInitialized(this, "data");
	}
	
	@Transient
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="141">
<file line="1012" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="1056" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(3,resultingParts.size());
			List<String> resultList = new ArrayList<String>( Arrays.asList("RE_00001", "RE_00002", "RE_00003") );//the expected values
			
			for(Part part : resultingParts)
			{
				System.out.println("Found part with part number: " + part.getPartNumber());
				for(String partNum : resultList)
				{
					System.out.println("Result List: " + partNum);
				}
				boolean ok = resultList.remove(part.getPartNumber());
				assertTrue(ok);
			}
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * searchForEmptyPropValue
	 */
	@Test
	public void searchForEmptyPropValue()
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="141">
<file line="192" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="326" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Approval appr = new Approval("The approval comment", true, approver1, drawing1);
			em.persist(appr);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="137">
<file line="78" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="120" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			User reviewer1 = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Review rev = new Review(thecomment, true, reviewer1, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="136">
<file line="46" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\usermanagement\RoleDAOTest.java"/>
<file line="105" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\usermanagement\seam\DAOTest.java"/>
<codefragment>
<![CDATA[
		em.close();
	}
	
	
	@Test
	public void testFindRoleByType()
	{		
		Role admin = roleDAO.findRoleByType(Role.ADMIN_NAME);		
		Assert.assertEquals(Role.ADMIN_NAME, admin.getType());
	}

	
	@Test
	public void testFindAllRoles()
	{
		List<Role> roles = roleDAO.findAll();
		
		Assert.assertEquals(3, roles.size());
		Assert.assertEquals(Role.MEMBER_NAME, roles.get(0).getType());
		Assert.assertEquals(Role.ADMIN_NAME, roles.get(1).getType());
		Assert.assertEquals(Role.MANAGER_NAME, roles.get(2).getType());	
	}
	
	
	@Test
	public void testAddRole()
	{
		try
		{
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="136">
<file line="53" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="615" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findAvailabilityCheckByIdList()
	{
		final AvailabilityCheckDao adao = new AvailabilityCheckDaoHibernateImpl(this.em);
		
		try
		{
			adao.begin();
			
			// creation of part
			final ProductGroupDao pgroupDao = new ProductGroupDaoHibernateImpl(this.em);
			final PartDao partDao = new PartDaoHibernateImpl(this.em);
			
			final ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			
			final Part partOS_00001 = new Part("OS_00001","Description" , Part.STATUS_PART, groupOS, null);
			final Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
						
			final StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			final StringProperty propvalue = new StringProperty("Value", "Value Description");
			groupOS.getProperties().add(propdrawing);
			groupOS.getProperties().add(propvalue);
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="136">
<file line="76" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="117" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
		try
		{
			this.beginTransaction();
			User approver1 = this.createUser();
			
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="135">
<file line="482" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="690" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			drdao.newDrawingVersionFor(drawing1, "Hello World", tempSymbol2, tempGeometry2, tempMap2, null, tempDrawingFile2);
			
			drdao.detachAndBegin();
			
			//Find all Drawings by IdList
			final List<Long> idList = Arrays.asList(id1,id3);
			final List<Long> compareList = Arrays.asList(id3,id1);
			final List<Drawing> resultList = drdao.findByIdList(idList);
			final ArrayList<Long> compareList2 = new ArrayList<Long>(compareList);
			assertEquals(resultList.size(),2);
			
			for (Drawing dra : resultList)
			{
				System.out.println("Found Drawing " +dra.getDrawingNumber());
				assertTrue(compareList2.remove(dra.getId()));
			}	

		}
		catch(DataConstraintException exc)
		{
			assertTrue(false);
		}
		finally
		{
			drdao.commit();
		}
	}
	
	
	@Test
	public void latestDrawing()
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="135">
<file line="324" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="362" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
			User approver1 = this.createUser();
			
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Approval appr = new Approval(comment, true, approver1, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="133">
<file line="78" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="284" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			final User reviewer = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="133">
<file line="94" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ManufacturerTest.java"/>
<file line="197" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ManufacturerTest.java"/>
<codefragment>
<![CDATA[
			Manufacturer manu2 = new Manufacturer("manuName2","the manu 1 description2","the manu notunique homepage", "the manu comment2", "email", "telephone", addresses2, "fax", "contact");
			
			em.persist(manu1);
			em.persist(manu2);
			
			ManufacturerAddress addr1 = new ManufacturerAddress("new Address", manu1); 
			addresses1.add(addr1);
			manu1.setAddresses(addresses1);
			ManufacturerAddress addr2 = new ManufacturerAddress("new Address", manu2); 
			addresses2.add(addr2);
			manu2.setAddresses(addresses2);
			
			this.em.persist(addr1);
			this.em.persist(addr2);
			
			
			em.persist(manu1);
			em.persist(manu2);
		}
		catch(DataConstraintException exc)
		{
			assertTrue(false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * comment of manufacturer (not null)
	 * @throws DataConstraintException 
	 */
	@Test(expected=java.lang.AssertionError.class)
	public void commentNotNull() throws DataConstraintException
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="133">
<file line="372" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="405" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * drawing file MIME type of drawing(not null)
	 */
	@Test(expected=at.fhj.itm.persistence.DataConstraintException.class)
	public void drawingFileMimeTypeNotNull()throws DataConstraintException
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="133">
<file line="193" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\NavigationAddProject.java"/>
<file line="208" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\NavigationAddProject.java"/>
<codefragment>
<![CDATA[
		selenium.click("ProjectLeaderAdd:Cancel");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You can choose one of the following tasks:"));
		selenium.click("Projects:AddProjectImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "This wizard leads you through the process of generating a new Project."));
		selenium.click("ProjectAddMain:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 1 of 4: Input Project Data"));
		selenium.type("ProjectsData:ProjectName", "Projekt 1");
		selenium.click("ProjectsData:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 2 of 4: Define Project Leader"));
		selenium.click("ProjectLeaderAdd:userList:0");
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="133">
<file line="73" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\FileBean.java"/>
<file line="95" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\FileBean.java"/>
<codefragment>
<![CDATA[
		Symbol tempSymbol = new Symbol(getUploadedNameSymbol(), getUploadedMimeTypeSymbol(), getUploadedCommentSymbol(), getUploadedFileSymbol() );
		fileDAO.makePersistent(tempSymbol);

		Geometry tempGeometry = new Geometry(getUploadedNameGeometry(), getUploadedMimeTypeGeometry(), getUploadedCommentGeometry(), getUploadedFileGeometry() );
		fileDAO.makePersistent(tempGeometry);

		at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map(getUploadedNameMap(), getUploadedMimeTypeMap(), getUploadedCommentMap(), getUploadedFileMap() );
		fileDAO.makePersistent(tempMap);

		DrawingFile tempDrawingFile = new DrawingFile(getUploadedNameDrawingFile(), getUploadedMimeTypeDrawing(), getUploadedCommentDrawing(), getUploadedFileDrawing());
		fileDAO.makePersistent(tempDrawingFile);

		tempDrawing = new Drawing(getDrawingDAO(), getDrawing(), getUploadedComment(), tempSymbol, tempGeometry, tempMap, tempDrawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="131">
<file line="80" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="193" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Review rev = new Review("theComment", true, reviewer, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="130">
<file line="468" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="833" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing(drawingNumber, "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing);
			em.flush();
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="130">
<file line="79" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="223" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
			User approver2 = this.createUser2();
			
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			final Approval appr = new Approval("The approval comment1", true, approver1, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="129">
<file line="88" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferDaoTest.java"/>
<file line="316" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartDaoTest.java"/>
<codefragment>
<![CDATA[
			distaDao.makePersistent(addr2);
			
//			distrDao.makePersistent(distr1);
//			distrDao.makePersistent(distr2);
			
			List<ManufacturerAddress> addresses3 = new ArrayList<ManufacturerAddress>();
			List<ManufacturerAddress> addresses4 = new ArrayList<ManufacturerAddress>();
			Manufacturer man1 = new Manufacturer("man_name1", "man_desc1", "man_homepage1", "man_comment1", "man_mail1", "man_phone1", addresses3, "man_fax1", "man_contact1");
			Manufacturer man2 = new Manufacturer("man_name2", "man_desc2", "man_homepage2", "man_comment2", "man_mail2", "man_phone2", addresses4, "man_fax2", "man_contact2");
			manudao.makePersistent(man1);
			manudao.makePersistent(man2);
			
			ManufacturerAddress addr3 = new ManufacturerAddress("new Address", man1);
			addresses3.add(addr3);
			man1.setAddresses(addresses3);
			manadao.makePersistent(addr3);
			
			ManufacturerAddress addr4 = new ManufacturerAddress("new Address", man2);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="129">
<file line="147" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandlerInt.java"/>
<file line="150" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandlerInt.java"/>
<codefragment>
<![CDATA[
	public void setMapSelectedName(String name);
	
	//DataSheet Properties & Methods
	public String getExistingDataSheetName();
	public void setExistingDataSheetName(String name);
	
	public String getUploadedDataSheetName();
	public void setUploadedDataSheetName(String name);
	
	public String getUploadedDataSheetMimeType();
	public void setUploadedDataSheetMimeType(String mimeType);
	
	public byte[] getUploadedDataSheetFile();
	public void setUploadedDataSheetFile(byte[] file);
	
	public List<DataSheet> getDataSheetNames();
	
	public String checkInputDataSheet() throws DataConstraintException;

	public String getDataSheetErrorMessage();
	public void setDataSheetErrorMessage(String dataSheetErrorMessage);
	
	public String getDataSheetFilter();
	public void setDataSheetFilter(String filter);	
	
	public List<SelectItem> getDataSheetSelectTypes();
	
	public void setDataSheetSelectType(String selectType);
	public String getDataSheetSelectType();
	public String getDataSheetSelectedName();
	
	public boolean showDataSheetAddNew();
	public boolean showDataSheetAddExisting();

	public String getDataSheetUrl(long id);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="129">
<file line="40" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandlerInt.java"/>
<file line="39" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandlerInt.java"/>
<codefragment>
<![CDATA[
	public String getDrawingUrl();
	
	//Symbol Properties & Methods
	public String getExistingSymbolName();
	public void setExistingSymbolName(String name);
	
	public String getUploadedSymbolName();
	public void setUploadedSymbolName(String name);
	
	public String getUploadedSymbolMimeType();
	public void setUploadedSymbolMimeType(String mimeType);
	
	public byte[] getUploadedSymbolFile();
	public void setUploadedSymbolFile(byte[] file);
	
	public List<File> getSymbolNames();
	
	public String checkInputSymbol() throws DataConstraintException;

	public String getSymbolErrorMessage();
	public void setSymbolErrorMessage(String symbolErrorMessage);
	
	public String getSymbolFilter();
	public void setSymbolFilter(String filter);	
	
	public List<SelectItem> getSymbolSelectTypes();
	
	public void setSymbolSelectType(String selectType);
	public String getSymbolSelectType();
	public String getSymbolSelectedName();
	
	public boolean showSymbolAddNew();
	public boolean showSymbolAddExisting();
	
	public String getSymbolUrl(long id);
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="129">
<file line="872" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandler.java"/>
<file line="933" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandler.java"/>
<codefragment>
<![CDATA[
		return dataSheetHandler.getShowKeepCurrent();	
	}
	
	//@Override
	public void dataSheetOnUiChange(ValueChangeEvent e) {
		dataSheetHandler.onUiChange(e);		
	}

	//@Override
	public int getDataSheetUiSelectedRow() {
		return dataSheetHandler.getUiSelectedRow();
	}

	//@Override
	public HtmlDataTable getDataSheetUiTable() {
		return dataSheetHandler.getUiTable();
	}

	//@Override
	public void setDataSheetUiSelectedRow(int selectedRow) {
		dataSheetHandler.setUiSelectedRow(selectedRow);
	}

	//@Override
	public void setDataSheetUiTable(HtmlDataTable table) {
		dataSheetHandler.setUiTable(table);
	}

	private String getFileUrl(String type, long id) {
		StringBuilder out = new StringBuilder();
		
		out.append("file?type=").append(type);
		out.append("&id=").append(id);
		
		return out.toString();
	}
	
	//@Override
	public String getSymbolUrl(long id) {
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="127">
<file line="78" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<file line="225" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			User reviewer2 = this.createUser2();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="127">
<file line="122" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="192" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
			
			Approval appr = new Approval("The approval comment", true, approver1, drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="125">
<file line="193" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorTest.java"/>
<file line="407" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorTest.java"/>
<codefragment>
<![CDATA[
			Distributor distr2 = new Distributor("distr_name2","distr_homepage","distr_comment2","distr_contactPerson2",addresses2,distr_phone,"distr_fax2","distr_mail2");
			
			this.em.persist(distr1);
			this.em.persist(distr2);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses1.add(addr1);
			distr1.setAddresses(addresses1);
			DistributorAddress addr2 = new DistributorAddress("new Addresss", distr2);
			addresses2.add(addr2);
			distr2.setAddresses(addresses2);
			
			this.em.persist(addr1);
			this.em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(distr2);
			this.em.flush();
		}
//		catch(DataConstraintException exc)
//		{
//			assertTrue(false);
//		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * Distributor Fax (not null, unique)
	 */
	@Test(expected=DataConstraintException.class)
	public void distributFaxNotNull()  throws DataConstraintException
]]>
</codefragment>
</duplication>
<duplication lines="29" tokens="124">
<file line="314" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartNewViewHelper.java"/>
<file line="239" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartViewHelper.java"/>
<codefragment>
<![CDATA[
	}
	/*
	 * Page Navigation
	 * (non-Javadoc)
	 */
	// Parameter
	private int pageSize = 10;
	private PageNavigator pagenavi;
	// PageSize
	public int getPageSize() 						{ return pageSize; }
	public void setPageSize(int pageSize) 			{ this.pageSize = pageSize; }
	// PageNavigator himself
	public PageNavigator getPagenavi() 				{ return pagenavi; }
	public void setPagenavi(PageNavigator pagenavi) { this.pagenavi = pagenavi; }
	public void setPagenavi()						{	}
	// Set PageSize of PageNavigator at PartSearch
	public int getPageSizeSearch() 					{ return getPageSize(); }
	public void setPageSizeSearch(int pageSize)
	{
		setPageSize(pageSize);
		getPagenavi().setPageSize(pageSize);
	}
	// update PageNavi after every refresh of SearchResult
	public void updatePageNavi(String returnTo, int items)
	{
		pagenavi = new PageNavigator(items ,pageSize, returnTo);
		pagenavi.setItemStart(0);
	}
}
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="123">
<file line="471" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="513" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry = new Geometry(geometry,"gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing(drawingNumber, "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing);
			em.flush();
			this.em.clear();
			
			Drawing drawing_new = em.find(Drawing.class,1L);

			assertEquals("Expected and actual Geometry is not the same",geometry, drawing_new.getGeometry().getName());
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="123">
<file line="120" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="223" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
			User approver2 = this.createUser2();
			
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="122">
<file line="101" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorDaoTest.java"/>
<file line="202" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorDaoTest.java"/>
<codefragment>
<![CDATA[
	public void findDistributorByFilter() throws DataConstraintException
	{
		final DistributorDao ddao = new DistributorDaoHibernateImpl(this.em);
		final DistributorAddressDao dadao = new DistributorAddressDaoHibernateImpl(this.em);
		
		try
		{
			List<DistributorAddress> addresses = new ArrayList<DistributorAddress>();
			ddao.begin();
			Distributor distr = new Distributor("distr_name","distr_homepage","distr_comment","distr_contactPerson",addresses,"distr_phone","distr_fax","distr_mail");
			ddao.makePersistent(distr);
			
			DistributorAddress addr = new DistributorAddress("new Addresss", distr);
			addresses.add(addr);
			distr.setAddresses(addresses);
			
			dadao.makePersistent(addr);
			ddao.makePersistent(distr);
			long distrID = distr.getId();
			ddao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="122">
<file line="17" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectWrongData.java"/>
<file line="16" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\NavigationEditProject.java"/>
<codefragment>
<![CDATA[
	private final static String PROJECT_NAME ="Projekt 1";
	private final static String PROJECT_NUMBER="PIE.09.001-01";
	private final static String PROJECT_LEADER="Stocksreiter";
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		// log in
		login = new LogInHelper();
		login.logIn(selenium);
		
		prepare = new SeleniumTestPreparation();
		
		// clear project and projectMembership tables
		prepare.removeAllProjectsAndMemberships();
	}
	
	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	/******************************************
	 * Projects Testcase Nr. 3.1
	 * Method tests the navigation to the 
	 * Function "Manage Projects" from different
	 * starting points in the GUI. 
	 ******************************************/
	@Test
	public void testNavigateManageProjects() throws Exception 
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="122">
<file line="29" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\Ajax4JSFDistributorBean.java"/>
<file line="27" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\Ajax4JSFManufacturerBean.java"/>
<codefragment>
<![CDATA[
	public Ajax4JSFManufacturerBean(){
		setNewAddressField(false);
		setSaveAddressButton(false);
		setAddAddressButton(true);
	}



	//@Override
	public Boolean getNewAddressField() {
		return newAddressField;
	}

	//@Override
	public void setNewAddressField(Boolean value) {
		
		if(value){
			setSaveAddressButton(true);
			setAddAddressButton(false);
		}else{
			setSaveAddressButton(false);
			setAddAddressButton(true);
		}
		this.newAddressField = value;
	}


	//@Override
	public Boolean getAddAddressButton() {
		return addAddressButton;
	}
	//@Override
	public void setAddAddressButton(Boolean value) {
		this.addAddressButton = value;
	}
	
	//@Override
	public Boolean getSaveAddressButton() {
		return this.saveAddressButton;
	}
	//@Override
	public void setSaveAddressButton(Boolean value) {
		this.saveAddressButton = value;
	}


	//@Override 
	@Remove
	public void destroy() {
	}

}
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="122">
<file line="154" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\PartBean.java"/>
<file line="133" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartEBean.java"/>
<codefragment>
<![CDATA[
	}
	
	public void savePart(String uploadedFileName, String uploadedContentType, byte[] uploadedFile) throws DaoException, DataConstraintException
	{
		// BugFix Nr. 53
		// DataSheet for Part
		if(uploadedFileName.length() > 0)
		{
			DataSheet dataSheet = new DataSheet(uploadedFileName, uploadedContentType, "", uploadedFile);
			new DataSheetDaoHibernateImpl(this.em).makePersistent(dataSheet);
			getPart().setDataSheet(dataSheet);
		}
		
		for(int i = 0; i < helperPropertiesEdit.size(); i++)
			partDAO.setValue(getPart(), helperPropertiesEdit.get(i).getName(), helperPropertiesEdit.get(i).getValue());
		mergeAndmakePersistent(getPart());
	}
	
	
	public void generateDownloadURLs()
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="122">
<file line="114" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandlerInt.java"/>
<file line="117" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandlerInt.java"/>
<codefragment>
<![CDATA[
	public String getGeometryUrl(long id);
	
	//handling the ui changes for the DataTable
	public HtmlDataTable getGeometryUiTable();
	public void setGeometryUiTable(HtmlDataTable table);
	
	public void geometryOnUiChange(ValueChangeEvent e);
	
	public int getGeometryUiSelectedRow();
	public void setGeometryUiSelectedRow(int selectedRow);
	
	//Map Properties & Methods
	public String getExistingMapName();
	public void setExistingMapName(String name);
	
	public String getUploadedMapName();
	public void setUploadedMapName(String name);
	
	public String getUploadedMapMimeType();
	public void setUploadedMapMimeType(String mimeType);
	
	public byte[] getUploadedMapFile();
	public void setUploadedMapFile(byte[] file);
	
	public List<File> getMapNames();
	
	public String checkInputMap() throws DataConstraintException;
	
	public String getMapErrorMessage();
	public void setMapErrorMessage(String mapErrorMessage);
	
	public String getMapSelectType();
	public String getMapSelectedName();
	public void setMapSelectedName(String name);
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="121">
<file line="451" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartTest.java"/>
<file line="491" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartTest.java"/>
<codefragment>
<![CDATA[
			Part partRE_00005 = new Part("RE_00005", "Resistor 4R7 1% RC0603", Part.STATUS_PART, groupRE, null);
			
			StringProperty propvalue = new StringProperty("Value", "Value Description");
			StringProperty proptoler = new StringProperty("Toler", "Tolers Description");
			StringProperty proppower = new StringProperty("Power", "Power Description");
			StringProperty propsize = new StringProperty("Size", "Size Description");
			StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			StringProperty propdescription = new StringProperty("Description", "Description Description");
			
			groupRE.getProperties().add(propvalue);
			groupRE.getProperties().add(proptoler);
			groupRE.getProperties().add(proppower);
			groupRE.getProperties().add(propsize);
			groupRE.getProperties().add(propdrawing);
			groupRE.getProperties().add(propdescription);
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="121">
<file line="81" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<file line="192" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ApprovalTest.java"/>
<codefragment>
<![CDATA[
			Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing1);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="120">
<file line="1014" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="1204" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			assertEquals(2,resultingParts.size());
			List<String> resultList = new ArrayList<String>( Arrays.asList("RE_00001", "RE_00002", "RE_00003") );//the expected values
			
			for(Part part : resultingParts)
			{
				System.out.println("Found part with part number: " + part.getPartNumber());
				for(String partNum : resultList)
				{
					System.out.println("Result List: " + partNum);
				}
				boolean ok = resultList.remove(part.getPartNumber());
				assertTrue(ok);
			}
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * checkStarAsWildcard
	 */
	@Test
	public void checkStarAsWildcard()
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="120">
<file line="160" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<file line="176" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<file line="192" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<file line="208" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<file line="224" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<codefragment>
<![CDATA[
		selenium.type("ProjectsData:ProjectNumber", "PIE:01:01_001");
		selenium.type("ProjectsData:startdate", "");
		selenium.type("ProjectsData:enddate", "");
		selenium.type("ProjectsData:projectdescription", "");
		selenium.type("ProjectsData:additionalnotes", "");
		selenium.type("ProjectsData:WorkingHoursSchematic", "");
		selenium.type("ProjectsData:WorkingHoursLayout", "");
		selenium.type("ProjectsData:WorkingHoursFabling", "");
		selenium.type("ProjectsData:CostsOfMaterial", "");
		selenium.type("ProjectsData:CostsOfProduction", "");
		selenium.type("ProjectsData:TotalCosts", "");
		selenium.click("ProjectsData:save");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Please indicate the Project Number in the correct format, e.g. 'PIE.05.004-01'!"));
		// 12
		selenium.type("ProjectsData:ProjectName", "Mein Projekt");
		selenium.type("ProjectsData:ProjectNumber", "PIE.01.001-01    ");
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="119">
<file line="430" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="634" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
		this.createByteArrays();
		try
		{
			this.beginTransaction();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", dfmt, "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing(drawingNumber, "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="119">
<file line="88" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="463" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
		this.createByteArrays();
		try
		{
			this.beginTransaction();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing(drawingNumber, "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="119">
<file line="238" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="623" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
	public void basicVersionTest()
	{
		final DrawingDao drdao = new DrawingDaoHibernateImpl(this.em);
		
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final FileDao filedao = new FileDaoHibernateImpl(this.em);
		
		try
		{
			drdao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			ProductGroup groupRE = new ProductGroup("RE","Resistors","Group description");
			Part part1 = new Part("RE_00001","part RE_00001 description",Part.STATUS_PART,groupRE,null);
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="118">
<file line="33" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\usermanagement\UserAndRoleTest.java"/>
<file line="48" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\usermanagement\seam\DAOTest.java"/>
<codefragment>
<![CDATA[
			em.getTransaction().begin();
			
			// create a User entity 
			User egon = userDAO.create("eteiniker", "eteiniker", "Egon", "Teiniker");
			userDAO.insert(egon);
	
	        User willi = userDAO.create("wzugaj", "wzugaj", "Willi", "Zugaj");
	        userDAO.insert(willi);
	        		
	        User eva = userDAO.create("etittel", "etittel", "Eva", "Tittel");
	        userDAO.insert(eva);
	        
	        
			// create a Role entity
			Role hacker = roleDAO.create(Role.MEMBER_NAME);
			roleDAO.insert(hacker);
			
			// create another Role entity
			Role admin = roleDAO.create(Role.ADMIN_NAME);
			roleDAO.insert(admin);
			
			Role manager = roleDAO.create(Role.MANAGER_NAME);
			roleDAO.insert(manager);
				
			
			// connect a User with a Role
			egon.getRoles().add(hacker);
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="118">
<file line="368" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingHandler.java"/>
<file line="339" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartViewHelperComplexSearch.java"/>
<codefragment>
<![CDATA[
	}

	/*
	 * Page Navigation
	 * (non-Javadoc)
	 */
	// Parameter
	private int pageSize = 10;
	private PageNavigator pagenavi;
	// PageSize
	public int getPageSize() 						{ return pageSize; }
	public void setPageSize(int pageSize) 			{ this.pageSize = pageSize; }
	// PageNavigator himself
	public PageNavigator getPagenavi() 				{ return pagenavi; }
	public void setPagenavi(PageNavigator pagenavi) { this.pagenavi = pagenavi; }
	public void setPagenavi()						{	}
	// Set PageSize of PageNavigator at PartSearch
	public int getPageSizeSearch() 					{ return getPageSize(); }
	public void setPageSizeSearch(int pageSize)
	{
		setPageSize(pageSize);
		getPagenavi().setPageSize(pageSize);
	}
	// update PageNavi after every refresh of SearchResult
	public void updatePageNavi(String returnTo, int items)
	{
		pagenavi = new PageNavigator(items ,pageSize, returnTo);
		//pagenavi.setItemStart(0);
	}
	
}
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="118">
<file line="240" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DistributorHandler.java"/>
<file line="351" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DistributorHandler.java"/>
<codefragment>
<![CDATA[
		}
		catch (EJBTransactionRolledbackException tb)
		{
			System.out.println("############### EJBTransactionRolledbackException when editing a Distributor");
			System.out.println("############### Class: " + tb.getClass());
			System.out.println("############### Cause: " + tb.getCause());
			System.out.println("############### Message: " + tb.getMessage());
			System.out.println("############### Message: " + tb.getCausedByException().getClass().getName());
			
			Exception ex = tb.getCausedByException();
			if (ex.getClass().getName().contains("EntityExistsException"))
			{
				facesMessages.add("A Distributor with this Name already exists! Please choose another Name.");
			}
			else
			{
				facesMessages.add("An error occured when adding this Distributor. Please choose another Name!");
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="117">
<file line="75" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectUnusualData.java"/>
<file line="102" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectUnusualData.java"/>
<file line="129" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectUnusualData.java"/>
<codefragment>
<![CDATA[
		selenium.type("ProjectsData:ProjectName", "12345678900987654321");
		selenium.click("ProjectsData:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 2 of 4: Define Project Leader"));
		selenium.click("ProjectLeaderAdd:userList:0");
		selenium.click("ProjectLeaderAdd:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 3 of 4: Select Project Members"));
		selenium.click("ProjectMemberAdd:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 4 of 4: Review and Create Project"));
		selenium.click("ProjectsAddReview:Save");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Success!"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "A new Project with the name 12345678900987654321 was created with success!"));
]]>
</codefragment>
</duplication>
<duplication lines="34" tokens="117">
<file line="27" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\GeometryEditHandler.java"/>
<file line="28" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\SymbolEditHandler.java"/>
<codefragment>
<![CDATA[
		this.addToSelectTypes(new SelectItem(CURRENT));
	}
	
	public File getCurrentFile() {
		return currentFile;
	}

	public void setCurrentFile(File currentFile) {
		this.currentFile = currentFile;
		this.setFile(currentFile);
	}


	//@Override
	public String checkInput(Boolean fromReview) throws DataConstraintException
	{
//		Symbol: check if only/at least one of the two upload files were indicated
		setErrorMessage("");
		
		if (CURRENT.equals(getSelectType())) {
			if (currentFile == null)
			{
				setErrorMessage("No current file.");
			}
			else
			{
				this.setFile(currentFile);
			}
		} 
		else if (NEW.equals(getSelectType()))
		{
			if (getUploadedFile() == null || getUploadedName() == null || getUploadedName().isEmpty())
			{
				setErrorMessage("You have chosen to upload a new Symbol file, but you didn't upload one!");
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="117">
<file line="165" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\AvailabilityCheckBean.java"/>
<file line="103" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\AvailabilityCheckEBean.java"/>
<codefragment>
<![CDATA[
	}


	public User getAvailabilityCheckOwner()
	{
		return availabilityCheckOwner;
	}
	public void setAvailabilityCheckOwner(User availabilityCheckOwner)
	{
		this.availabilityCheckOwner = availabilityCheckOwner;
	}
	public AvailabilityCheck getAvailabilityCheck() 
	{
		return availabilityCheck;
	}
	public void setAvailabilityCheck(AvailabilityCheck availabilityCheck)
	{
		this.availabilityCheck = availabilityCheck;
	}
	public String getNeededNumbers() 
	{
		return neededNumbers;
	}
	public void setNeededNumbers(String neededNumbers)
	{
		this.neededNumbers = neededNumbers;
	}
	public String getOwnerComment()
	{
		return ownerComment;
	}
	public void setOwnerComment(String ownerComment)
	{
		this.ownerComment = ownerComment;
	}
	public String getPurchaserComment() 
	{
		return purchaserComment;
	}
	public void setPurchaserComment(String purchaserComment) 
	{
		this.purchaserComment = purchaserComment;
	}
}
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="116">
<file line="126" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="355" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
			final Part partOS_00003 = new Part("OS_00003", "VCXO3", Part.STATUS_PART, groupOS, null);
						
			final StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			final StringProperty propvalue = new StringProperty("Value", "Value Description");
			groupOS.getProperties().add(propdrawing);
			groupOS.getProperties().add(propvalue);
			new StringPropertyValue("10014", propdrawing, partOS_00001);
			new StringPropertyValue("10014", propdrawing, partOS_00002);
			new StringPropertyValue("10014", propvalue, partOS_00001);
			new StringPropertyValue("10014", propvalue, partOS_00002);
							
			pgroupDao.makePersistent(groupOS);
			
			User user1 = this.createUser();
			
			// availability Check
			final AvailabilityCheck avcheck1 = new AvailabilityCheck(100, "comment_owner1", "comment_purchaser1", user1, partOS_00002);
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="116">
<file line="314" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartNewViewHelper.java"/>
<file line="339" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartViewHelperComplexSearch.java"/>
<codefragment>
<![CDATA[
	}

	/*
	 * Page Navigation
	 * (non-Javadoc)
	 */
	// Parameter
	private int pageSize = 10;
	private PageNavigator pagenavi;
	// PageSize
	public int getPageSize() 						{ return pageSize; }
	public void setPageSize(int pageSize) 			{ this.pageSize = pageSize; }
	// PageNavigator himself
	public PageNavigator getPagenavi() 				{ return pagenavi; }
	public void setPagenavi(PageNavigator pagenavi) { this.pagenavi = pagenavi; }
	public void setPagenavi()						{	}
	// Set PageSize of PageNavigator at PartSearch
	public int getPageSizeSearch() 					{ return getPageSize(); }
	public void setPageSizeSearch(int pageSize)
	{
		setPageSize(pageSize);
		getPagenavi().setPageSize(pageSize);
	}
	// update PageNavi after every refresh of SearchResult
	public void updatePageNavi(String returnTo, int items)
	{
		pagenavi = new PageNavigator(items ,pageSize, returnTo);
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="116">
<file line="703" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\PartBean.java"/>
<file line="199" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartViewHelper.java"/>
<codefragment>
<![CDATA[
	}

	public String getUrlDatasheet() {
		return urlDatasheet;
	}

	public void setUrlDatasheet(String urlDatasheet) {
		this.urlDatasheet = urlDatasheet;
	}

	public String getUrlGeometry() {
		return urlGeometry;
	}

	public void setUrlGeometry(String urlGeometry) {
		this.urlGeometry = urlGeometry;
	}

	public String getUrlMap() {
		return urlMap;
	}

	public void setUrlMap(String urlMap) {
		this.urlMap = urlMap;
	}

	public String getUrlSymbol() {
		return urlSymbol;
	}

	public void setUrlSymbol(String urlSymbol) {
		this.urlSymbol = urlSymbol;
	}

	public String getUrlDrawing() {
		return urlDrawing;
	}

	public void setUrlDrawing(String urlDrawing) {
		this.urlDrawing = urlDrawing;
	}
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="116">
<file line="368" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingHandler.java"/>
<file line="314" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartNewViewHelper.java"/>
<codefragment>
<![CDATA[
	}

	/*
	 * Page Navigation
	 * (non-Javadoc)
	 */
	// Parameter
	private int pageSize = 10;
	private PageNavigator pagenavi;
	// PageSize
	public int getPageSize() 						{ return pageSize; }
	public void setPageSize(int pageSize) 			{ this.pageSize = pageSize; }
	// PageNavigator himself
	public PageNavigator getPagenavi() 				{ return pagenavi; }
	public void setPagenavi(PageNavigator pagenavi) { this.pagenavi = pagenavi; }
	public void setPagenavi()						{	}
	// Set PageSize of PageNavigator at PartSearch
	public int getPageSizeSearch() 					{ return getPageSize(); }
	public void setPageSizeSearch(int pageSize)
	{
		setPageSize(pageSize);
		getPagenavi().setPageSize(pageSize);
	}
	// update PageNavi after every refresh of SearchResult
	public void updatePageNavi(String returnTo, int items)
	{
		pagenavi = new PageNavigator(items ,pageSize, returnTo);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="115">
<file line="45" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<file line="224" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<codefragment>
<![CDATA[
		final ProductGroupDao gdao = new ProductGroupDaoHibernateImpl(this.em);
		final String sheet_title1="sheet_title1";
		try
		{
			ddao.begin();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			byte[] byteArray2 = new byte[3];
			byteArray2[0]='x';
			byteArray2[1]='y';
			byteArray2[2]='z';
			
			DataSheet sheet1 = new DataSheet(sheet_title1, "sheet_mime_type1", "pfix1", byteArray);
			DataSheet sheet2 = new DataSheet("sheet_title2", "sheet_mime_type2", "pfix2", byteArray2);
			DataSheet sheet3 = new DataSheet("sheet_title3", "sheet_mime_type3", "pfix3", byteArray);
]]>
</codefragment>
</duplication>
<duplication lines="23" tokens="115">
<file line="57" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\SymbolAddHandler.java"/>
<file line="77" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\SymbolEditHandler.java"/>
<codefragment>
<![CDATA[
					final String fileName = getUploadedName();
					
					// create pdf reader
					final PdfReader reader = new PdfReader( data );
					if(!reader.isOpenedWithFullPermissions())
					{
						setErrorMessage( fileName + " has restricted PDF-permissions. To use " + fileName + " for creating a new Drawing File, " +
								"full PDF-file permissions are needed. You can use Adobe Reader to check a file's PDF permissions.");
					}
					
					this.setFile( new Symbol(fileName, mime,"", data) );
				} catch (Exception e) 
				{
					setErrorMessage(e.toString());
				}
			}
		} 
		else if (EXISTING.equals(getSelectType()))
		{
			if ( this.getFile() == null || getExistingName() == null || getExistingName().isEmpty() )
			{
				System.out.println("SelectType == existing and no existing file selected");
				setErrorMessage("You have chosen to add an existing file, but you have not selected one!");
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="115">
<file line="58" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\GeometryAddHandler.java"/>
<file line="76" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\GeometryEditHandler.java"/>
<codefragment>
<![CDATA[
					final String fileName = getUploadedName();
					
					// create pdf reader
					final PdfReader reader = new PdfReader( data );
					if(!reader.isOpenedWithFullPermissions())
					{
						setErrorMessage( fileName + " has restricted PDF-permissions. To use " + fileName + " for creating a new Drawing File, " +
								"full PDF-file permissions are needed. You can use Adobe Reader to check a file's PDF permissions.");
					}
					
					this.setFile( new Geometry(fileName, mime,"", data) );
				} catch (Exception e) {
					setErrorMessage(e.toString());
				}
			}
		} 
		else if (EXISTING.equals(getSelectType()))
		{
			if ( this.getFile() == null || getExistingName() == null || getExistingName().isEmpty() )
			{
				System.out.println("SelectType == existing and no existing file selected");
				setErrorMessage("You have chosen to add an existing file, but you have not selected one!");
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="114">
<file line="358" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="1014" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			assertEquals(3,resultingParts.size());
			List<String> resultList = new ArrayList<String>( Arrays.asList("RE_00001", "RE_00002", "RE_00003") );//the expected values
			
			for(Part part : resultingParts)
			{
				System.out.println("Found part with part number: " + part.getPartNumber());
				for(String partNum : resultList)
				{
					System.out.println("Result List: " + partNum);
				}
				boolean ok = resultList.remove(part.getPartNumber());
				assertTrue(ok);
			}
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * searchForNullMap
	 */
	@Test
	public void searchForNullMap()
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="114">
<file line="147" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorDaoTest.java"/>
<file line="73" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\OfferDaoTest.java"/>
<codefragment>
<![CDATA[
			List<DistributorAddress> addresses2 = new ArrayList<DistributorAddress>();
			Distributor distr1 = new Distributor("distr_name1","distr_homepage1","distr_comment1","distr_contactPerson1",addresses1,"distr_phone1","distr_fax1","distr_mail1");
			Distributor distr2 = new Distributor("distr_name2","distr_homepage2","distr_comment2","distr_contactPerson2",addresses2,"distr_phone2","distr_fax2","distr_mail2");

			ddao.makePersistent(distr1);
			ddao.makePersistent(distr2);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses1.add(addr1);
			distr1.setAddresses(addresses1);
			dadao.makePersistent(addr1);
			
			DistributorAddress addr2 = new DistributorAddress("new Addresss", distr2);
			addresses2.add(addr2);
			distr2.setAddresses(addresses2);
			dadao.makePersistent(addr2);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="114">
<file line="219" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\utils\SeleniumTestPreparation.java"/>
<file line="257" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\utils\SeleniumTestPreparation.java"/>
<codefragment>
<![CDATA[
			String description, String additionalNotes, String leaderUserName, String[] memberUserNames,
			BigDecimal workingHoursSchematic, BigDecimal workingHoursLayout, BigDecimal workingHoursFabling, 
			BigDecimal costsMaterial, BigDecimal costsProduction, BigDecimal totalCosts) throws DataConstraintException
	{
		createAndBegin();
		
		// generate new Dao Objects
		projectDao = new ProjectDaoHibernateImpl(em);
		userDao = new UserDAO();
		userDao.setEntityManager(em);
		
        Project project = new Project(projectName, description, projectNumber, startDate, endDate, additionalNotes, 
        							  workingHoursSchematic, workingHoursLayout, workingHoursFabling, costsMaterial, costsProduction, totalCosts);
        
        // define Project Leader (mandatory)
        User user = userDao.findUserByUsername(leaderUserName);
        
        ProjectMembership leader = new ProjectMembership(project, user, true);
        List<ProjectMembership> members = new ArrayList<ProjectMembership>();
        members.add(leader);
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="113">
<file line="193" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorTest.java"/>
<file line="480" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DistributorTest.java"/>
<codefragment>
<![CDATA[
			Distributor distr2 = new Distributor("distr_name2","distr_homepage","distr_comment2","distr_contactPerson2",addresses2,"distr_phone",distr_fax,"distr_cust_number2");
			
			this.em.persist(distr1);
			this.em.persist(distr2);
			
			DistributorAddress addr1 = new DistributorAddress("new Addresss", distr1);
			addresses1.add(addr1);
			distr1.setAddresses(addresses1);
			DistributorAddress addr2 = new DistributorAddress("new Addresss", distr2);
			addresses2.add(addr2);
			distr2.setAddresses(addresses2);
			
			this.em.persist(addr1);
			this.em.persist(addr2);
			
			this.em.persist(distr1);
			this.em.persist(distr2);
			this.em.flush();
		}
//		catch(DataConstraintException exc)
//		{
//			assertTrue(false);
//		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * Distributor Mail (not null)
	 */
	
	// It is allowed to specify no distributor mail (is a foreign key from mail table to distributor,
	// thus no null value is created if no mail is present
	@Test()
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="113">
<file line="419" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="495" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
	public void removeAvailabilityCheck()
	{
		final AvailabilityCheckDao adao = new AvailabilityCheckDaoHibernateImpl(this.em);
		
		try
		{
			adao.begin();
			
			// creation of part
			final ProductGroupDao pgroupDao = new ProductGroupDaoHibernateImpl(this.em);
			final PartDao partDao = new PartDaoHibernateImpl(this.em);
			
			final ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			
			// groupCP.getParts().add(part1);
			final Part partOS_00001 = new Part("OS_00001","Description" , Part.STATUS_PART, groupOS, null);
			final Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
			final Part partOS_00003 = new Part("OS_00003", "VCXO3", Part.STATUS_PART, groupOS, null);
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="113">
<file line="364" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="512" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
			final Part partOS_00003 = new Part("OS_00003", "VCXO3", Part.STATUS_PART, groupOS, null);
							
			pgroupDao.makePersistent(groupOS);
			
			User user1 = this.createUser();
			
			// availability Check
			final AvailabilityCheck avcheck1 = new AvailabilityCheck(100, "comment_owner1", "comment_purchaser1", user1, partOS_00002);
			final AvailabilityCheck avcheck2 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2", user1, partOS_00002);
			final AvailabilityCheck avcheck3 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2OS3", user1, partOS_00003);
			final AvailabilityCheck avcheck4 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2OS1", user1, partOS_00001);
			
			adao.makePersistent(avcheck1);
			adao.makePersistent(avcheck2);
			adao.makePersistent(avcheck3);
			adao.makePersistent(avcheck4);
			adao.detachAndBegin();
			
			//remove
			AvailabilityCheck avcheck1_new = adao.findById(1L,false);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="113">
<file line="338" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="495" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
	public void removeAvailabilityCheck()
	{
		final AvailabilityCheckDao adao = new AvailabilityCheckDaoHibernateImpl(this.em);
		
		try
		{
			adao.begin();
			
			// creation of part
			final ProductGroupDao pgroupDao = new ProductGroupDaoHibernateImpl(this.em);
			final PartDao partDao = new PartDaoHibernateImpl(this.em);
			
			final ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			
			// groupCP.getParts().add(part1);
			final Part partOS_00001 = new Part("OS_00001","Description" , Part.STATUS_PART, groupOS, null);
			final Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
			final Part partOS_00003 = new Part("OS_00003", "VCXO3", Part.STATUS_PART, groupOS, null);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="112">
<file line="57" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartTest.java"/>
<file line="480" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartTest.java"/>
<codefragment>
<![CDATA[
	public void persistValues()
	{
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
						
			Part partRE_00001 = new Part("RE_00001", "Resistor 0R 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00003 = new Part("RE_00003", "Resistor 2R2 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00004 = new Part("RE_00004", "Resistor 3R3 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00005 = new Part("RE_00005", "Resistor 4R7 1% RC0603", Part.STATUS_PART, groupRE, null);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="112">
<file line="595" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="627" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			final String propName=PartDao.ORDER_KEYWORD_DESCRIPTION;
			final String propValue="Resistor 0R 2% RC0???";
			final Map<String, String> propValMapping = new HashMap<String, String>();
			propValMapping.put(propName, propValue);
			
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(resultingParts.size(), 1);
			assertEquals(resultingParts.get(0).getPartNumber(), "RE_00002");
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	
	@Test
	public void searchDescriptionAllGroupsOrderedByPartNumberDESC()
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="112">
<file line="445" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="512" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
			final Part partOS_00003 = new Part("OS_00003", "VCXO3", Part.STATUS_PART, groupOS, null);
							
			pgroupDao.makePersistent(groupOS);
			
			User user1 = this.createUser();
			
			// availability Check
			final AvailabilityCheck avcheck1 = new AvailabilityCheck(100, "comment_owner1", "comment_purchaser1", user1, partOS_00002);
			final AvailabilityCheck avcheck2 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2", user1, partOS_00002);
			final AvailabilityCheck avcheck3 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2OS3", user1, partOS_00003);
			final AvailabilityCheck avcheck4 = new AvailabilityCheck(200, "comment_owner2", "comment_purchaser2OS1", user1, partOS_00001);
			
			adao.makePersistent(avcheck1);
			adao.makePersistent(avcheck2);
			adao.makePersistent(avcheck3);
			adao.makePersistent(avcheck4);
			adao.detachAndBegin();
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="112">
<file line="42" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataAllowedValues.java"/>
<file line="46" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectLeader.java"/>
<codefragment>
<![CDATA[
		login.logIn(selenium);
		
	}
	
	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	private void prepareProjectData() throws DataConstraintException
	{
		Calendar calendar = new GregorianCalendar();
		calendar.set(new Integer(2009),new Integer(6), new Integer(1));
        Date start = calendar.getTime();
        calendar.set(new Integer(2009),new Integer(6), new Integer(30));
        Date end = calendar.getTime();
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="112">
<file line="62" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectUnusualData.java"/>
<file line="177" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectWrongData.java"/>
<codefragment>
<![CDATA[
	public void testWrongDateSpecification() throws Exception
	{
		selenium.click("topNavigation:HomeTop");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Welcome to the CaDDaT Web-Interface!"));
		selenium.click("leftNavigation:AddProject");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "This wizard leads you through the process of generating a new Project."));
		selenium.click("ProjectAddMain:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 1 of 4: Input Project Data"));
		selenium.type("ProjectsData:ProjectName", "testproject");
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="112">
<file line="182" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectAllowedData.java"/>
<file line="227" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectAllowedData.java"/>
<codefragment>
<![CDATA[
	public void testAddProjectSomeFieldsFilter() throws Exception 
	{
		selenium.click("topNavigation:HomeTop");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Welcome to the CaDDaT Web-Interface!"));
		selenium.click("leftNavigation:AddProject");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "This wizard leads you through the process of generating a new Project."));
		selenium.click("ProjectAddMain:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 1 of 4: Input Project Data"));
		selenium.type("ProjectsData:ProjectName", "Projekt 3");
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="112">
<file line="88" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\business\unittest\PartViewHelperBeanTest.java"/>
<file line="480" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartTest.java"/>
<codefragment>
<![CDATA[
	public void persistValues()
	{
		try
		{
			this.beginTransaction();
			ProductGroup groupRE = new ProductGroup("RE", "Resistors", "Resistordescripton");
						
			Part partRE_00001 = new Part("RE_00001", "Resistor 0R 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00002 = new Part("RE_00002", "Resistor 1R5 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00003 = new Part("RE_00003", "Resistor 2R2 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00004 = new Part("RE_00004", "Resistor 3R3 1% RC0603", Part.STATUS_PART, groupRE, null);
			Part partRE_00005 = new Part("RE_00005", "Resistor 4R7 1% RC0603", Part.STATUS_PART, groupRE, null);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="112">
<file line="1058" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandler.java"/>
<file line="376" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingHandler.java"/>
<codefragment>
<![CDATA[
	private PageNavigator pagenavi;
	// PageSize
	public int getPageSize() 						{ return pageSize; }
	public void setPageSize(int pageSize) 			{ this.pageSize = pageSize; }
	// PageNavigator himself
	public PageNavigator getPagenavi() 				{ return pagenavi; }
	public void setPagenavi(PageNavigator pagenavi) { this.pagenavi = pagenavi; }
	public void setPagenavi()						{	}
	// Set PageSize of PageNavigator at PartSearch
	public int getPageSizeSearch() 					{ return getPageSize(); }
	public void setPageSizeSearch(int pageSize)
	{
		setPageSize(pageSize);
		getPagenavi().setPageSize(pageSize);
	}
	// update PageNavi after every refresh of SearchResult
	public void updatePageNavi(String returnTo, int items)
	{
		pagenavi = new PageNavigator(items ,pageSize, returnTo);
		//pagenavi.setItemStart(0);
	}
	
	
}
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="111">
<file line="156" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataAllowedValues.java"/>
<file line="127" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<file line="143" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<codefragment>
<![CDATA[
		selenium.type("ProjectsData:ProjectName", "     ");
		selenium.type("ProjectsData:ProjectNumber", "");
		selenium.type("ProjectsData:startdate", "");
		selenium.type("ProjectsData:enddate", "");
		selenium.type("ProjectsData:projectdescription", "");
		selenium.type("ProjectsData:additionalnotes", "");
		selenium.type("ProjectsData:WorkingHoursSchematic", "");
		selenium.type("ProjectsData:WorkingHoursLayout", "");
		selenium.type("ProjectsData:WorkingHoursFabling", "");
		selenium.type("ProjectsData:CostsOfMaterial", "");
		selenium.type("ProjectsData:CostsOfProduction", "");
		selenium.type("ProjectsData:TotalCosts", "");
		selenium.click("ProjectsData:save");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You have to indicate a Project Name!"));
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="110">
<file line="499" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="864" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			final String propName="Value";
			final String propValue="1R5";
			final Map<String, String> propValMapping = new HashMap<String, String>();
			propValMapping.put(propName, propValue);
			
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(resultingParts.size(), 1);
			assertEquals(resultingParts.get(0).getPartNumber(), "RE_00002");
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * searchForAll2ProductGroups
	 */
	@Test
	public void searchForAll2ProductGroups()
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="110">
<file line="1058" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandler.java"/>
<file line="322" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\partsearch\PartNewViewHelper.java"/>
<codefragment>
<![CDATA[
	private PageNavigator pagenavi;
	// PageSize
	public int getPageSize() 						{ return pageSize; }
	public void setPageSize(int pageSize) 			{ this.pageSize = pageSize; }
	// PageNavigator himself
	public PageNavigator getPagenavi() 				{ return pagenavi; }
	public void setPagenavi(PageNavigator pagenavi) { this.pagenavi = pagenavi; }
	public void setPagenavi()						{	}
	// Set PageSize of PageNavigator at PartSearch
	public int getPageSizeSearch() 					{ return getPageSize(); }
	public void setPageSizeSearch(int pageSize)
	{
		setPageSize(pageSize);
		getPagenavi().setPageSize(pageSize);
	}
	// update PageNavi after every refresh of SearchResult
	public void updatePageNavi(String returnTo, int items)
	{
		pagenavi = new PageNavigator(items ,pageSize, returnTo);
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="109">
<file line="15" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsManager.java"/>
<file line="15" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\testPermissions\PermissionsMember.java"/>
<codefragment>
<![CDATA[
	private final static String[] NEEDED_USERS = {"member"};
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		login = new LogInHelper();
		prepare = new SeleniumTestPreparation();
		
		// activate the needed users
		prepare.activateNeededUsersOnly(NEEDED_USERS);
	}

	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	/******************************************
	 * Projects Testcase Nr. 5.5
	 * Method tests if a user with the role
	 * "member" is allowed to add a new
	 * project and view all existing projects.
	 ******************************************/
	@Test
	public void testCheckPermissionsAddView() throws Exception
	{
		// 1 - log in as Member
		login.logIn(selenium,"member", "member");
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="107">
<file line="93" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="833" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing(drawingNumber, "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="107">
<file line="104" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\NavigationEditProject.java"/>
<file line="149" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\NavigationEditProject.java"/>
<file line="214" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\NavigationEditProject.java"/>
<codefragment>
<![CDATA[
	public void testNavigateEditProjectMembers() throws Exception
	{
		prepare.createProject(PROJECT_NAME, PROJECT_NUMBER, PROJECT_LEADER);
		//1
		selenium.click("topNavigation:HomeTop");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Welcome to the CaDDaT Web-Interface!"));
		//2
		selenium.click("availableTasks:ProjectsImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You can choose one of the following tasks:"));
		//3
		selenium.click("Projects:ManageProjectsImg");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Manage Projects"));
		//4
		selenium.click("ProjectsList:projectInfo:0:changeMembers");
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="107">
<file line="64" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectUnusualData.java"/>
<file line="274" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectWrongData.java"/>
<codefragment>
<![CDATA[
		selenium.click("topNavigation:HomeTop");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Welcome to the CaDDaT Web-Interface!"));
		selenium.click("leftNavigation:AddProject");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "This wizard leads you through the process of generating a new Project."));
		selenium.click("ProjectAddMain:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 1 of 4: Input Project Data"));
		selenium.type("ProjectsData:ProjectName", "Projekt 4");
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="107">
<file line="184" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectAllowedData.java"/>
<file line="114" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\NavigationAddProject.java"/>
<codefragment>
<![CDATA[
		selenium.click("topNavigation:HomeTop");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Welcome to the CaDDaT Web-Interface!"));
		selenium.click("leftNavigation:AddProject");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "This wizard leads you through the process of generating a new Project."));
		selenium.click("ProjectAddMain:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not present", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 1 of 4: Input Project Data"));
		selenium.type("ProjectsData:ProjectName", "Projekt 1");
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="107">
<file line="132" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\projects\business\ProjectAddLogic.java"/>
<file line="53" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\projects\business\ProjectUtilsLogic.java"/>
<codefragment>
<![CDATA[
	}
	
	/* *********************
	 * Methods
	 * *********************/
	
	/***********
	 * Method returns a List of activated Users
	 */
	public List<User> getListOfActivatedUsers()
	{
		List<User> activatedUsers = userDao.findActiveNoAdminUsers();
		return activatedUsers;
	}
	
	/***********
	 * Method returns a List of activated Users, but without the User
	 * that was defined as ProjectLeader in the Step 2 of the Wizard
	 * @param username (String): name of the project leader
	 */
	public List<User> getListOfActivatedUsersWithoutLeader(String username)
	{
		List<User> users = userDao.findActiveNoAdminLeaderUsers(username);
		return users;
	}
	
	/***********
	 * Method returns a List of activated and filtered Users
	 */
	public List<User> getListOfActivatedFilteredUsers(String filter)
	{
		List<User> activatedFilteredUsers = userDao.findActiveFilteredNoAdminUsers(filter);
		return activatedFilteredUsers;
	}
	
	/***********
	 * Method returns a List of activated and filtered Users, but 
	 * without the User that was defined as ProjectLeader in the 
	 * Step 2 of the Wizard
	 * @param username (String): name of the project leader
	 * @param filter (String): text, by which the last name of the user should be filtered
	 */
	public List<User> getListOfActivatedFilteredUsersWithoutLeader(String filter, String username)
	{
		List<User> users = userDao.findActiveFilteredNoAdminLeaderUsers(filter, username);
		return users;
	}
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="106">
<file line="1792" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="1832" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			List<Part> resultingParts1 = searchDao.search(productGroupIdentifier, propValMapping, "partNumber", true);
		
			//demonstrate that database does exist
			final String propName2="Toler";
			final String propValue2="1%";
			final Map<String, String> propValMapping2 = new HashMap<String, String>();
			propValMapping2.put(propName2, propValue2);
			
			List<Part> resultingParts2 = searchDao.search(productGroupIdentifier, propValMapping2, "partNumber", true);
			assertEquals(resultingParts2.size(),3);
		
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	@Test(expected=java.lang.AssertionError.class)
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="106">
<file line="96" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="272" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry = new Geometry("geometry1", gmt, "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing);
			
			em.persist(drawing);
			em.flush();
		}
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="106">
<file line="742" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<file line="939" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingDaoTest.java"/>
<codefragment>
<![CDATA[
			Part part2 = new Part("RE_00002","part RE_00002 description",Part.STATUS_PART,groupRE,null);
			
			gdao.makePersistent(groupRE);
					
			final Symbol tempSymbol1 = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol1);
			final Symbol tempSymbol2 = new Symbol("thesymbol2", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol2);
			final Symbol tempSymbol3 = new Symbol("thesymbol3", "smt", "symcomment", symbolData);
			filedao.makePersistent(tempSymbol3);
			
			final Geometry tempGeometry1 = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			filedao.makePersistent(tempGeometry1);
			final Geometry tempGeometry2 = new Geometry("geometry2","gmt", "geo_comment", geometryData );
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="106">
<file line="170" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingAddHandler.java"/>
<file line="192" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DrawingEditHandler.java"/>
<codefragment>
<![CDATA[
				if ("New".equals(dataSheetHandler.getSelectType())) dataSheetHandler.getDataSheetDao().makePersistent(dataSheetHandler.getDataSheet());
				
				
				// Make managed Objects again to ensure that getDataLazy() works with managed Objects
				// Bugfix Issue Nr. 201
				File managedSymbolFile = em.find(symbolHandler.getFile().getClass(), symbolHandler.getFile().getId());
				File managedGeometryFile = em.find(geometryHandler.getFile().getClass(), geometryHandler.getFile().getId());
				File managedMapFile = em.find(mapHandler.getFile().getClass(), mapHandler.getFile().getId());
				
				
				//Generate Drawing File out of existing Ones...
				PdfFactory factory = new PdfFactory();
				
				byte[] fileData = factory.createDrawingPdf(user,
															getDrawingNumber(),
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="105">
<file line="633" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="677" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
		final String drawingNumber ="my drawing number";
		this.createByteArrays();
		try
		{
			this.beginTransaction();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="104">
<file line="466" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="78" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			User reviewer = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="104">
<file line="96" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="372" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
			em.persist(drawing);
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="104">
<file line="91" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="78" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			User reviewer = this.createUser();
			
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="104">
<file line="56" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DataSheetAddHandler.java"/>
<file line="56" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\business\DataSheetEditHandler.java"/>
<codefragment>
<![CDATA[
		else if (NEW.equals(getSelectType()))
		{
			if (getUploadedFile() == null || getUploadedName() == null || getUploadedName().isEmpty())
			{
				setErrorMessage("You have chosen to upload a new Datasheet file, but you didn't upload one!");
			}
			else if (!"application/pdf".equalsIgnoreCase(getUploadedMimeType()))
			{
				setErrorMessage("You have to upload a PDF file.");
			}
//			Bugfix Issue Nr. 158
			else if (checkUploadedDataSheet(getUploadedName())== false)
			{
				setErrorMessage("There is already a Drawing Datasheet file with the same name existing in the database!");
			}
			else
			{
				try 
				{
					final byte[] data = getUploadedFile();
					final String mime = getUploadedMimeType();
					final String fileName = getUploadedName();
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="103">
<file line="107" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartDaoTest.java"/>
<file line="727" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartDaoTest.java"/>
<codefragment>
<![CDATA[
			this.beginTransaction();

			ProductGroup groupOS = new ProductGroup("OS", "Oscillators", "Crystals, Clock Oscillators, Resonators, etc.");
			ProductGroup groupCP = new ProductGroup("CP","Polar Capacitors", "Tantal, Aluminium, etc.");
					
			Part partOS_00001 = new Part("OS_00001",part_OS_00001_description , Part.STATUS_PART, groupOS, null);
			Part partOS_00002 = new Part("OS_00002", "VCXO", Part.STATUS_PART, groupOS, null);
			Part partCP_00001 = new Part("CP_00001", "Tantal Cap 10uF 10V TC_A", Part.STATUS_PART, groupCP, null);

			
			StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			StringProperty propvalue = new StringProperty("Value", "Value Description");
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="103">
<file line="151" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\utils\SeleniumTestPreparation.java"/>
<file line="191" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\utils\SeleniumTestPreparation.java"/>
<codefragment>
<![CDATA[
        Project project = new Project(projectName, "", projectNumber, startDate, endDate, "", 
        							  new BigDecimal(0),new BigDecimal(0),new BigDecimal(0), 
        							  new BigDecimal(0),new BigDecimal(0), new BigDecimal(0));
        
        // define Project Leader (mandatory)
        User user = userDao.findUserByUsername(leaderUserName);
        
        ProjectMembership leader = new ProjectMembership(project, user, true);
        List<ProjectMembership> members = new ArrayList<ProjectMembership>();
        members.add(leader);
        project.setMemberships(members);
        
        Project p = em.merge(project);
       
        em.persist(p);
        
		commitAndClose();
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="103">
<file line="157" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataAllowedValues.java"/>
<file line="160" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<file line="240" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<file line="266" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\editProject\EditProjectDataWrongValues.java"/>
<codefragment>
<![CDATA[
		selenium.type("ProjectsData:ProjectNumber", "PIE.09.001-02");
		selenium.type("ProjectsData:startdate", "");
		selenium.type("ProjectsData:enddate", "");
		selenium.type("ProjectsData:projectdescription", "");
		selenium.type("ProjectsData:additionalnotes", "");
		selenium.type("ProjectsData:WorkingHoursSchematic", "");
		selenium.type("ProjectsData:WorkingHoursLayout", "");
		selenium.type("ProjectsData:WorkingHoursFabling", "");
		selenium.type("ProjectsData:CostsOfMaterial", "");
		selenium.type("ProjectsData:CostsOfProduction", "");
		selenium.type("ProjectsData:TotalCosts", "");
		selenium.click("ProjectsData:save");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "This Project Name already exists. Please define another Project Name! This Project Number already exists. Please define another Project Number!"));
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="103">
<file line="64" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectUnusualData.java"/>
<file line="66" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectWrongData.java"/>
<codefragment>
<![CDATA[
		selenium.click("topNavigation:HomeTop");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Welcome to the CaDDaT Web-Interface!"));
		selenium.click("leftNavigation:AddProject");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "This wizard leads you through the process of generating a new Project."));
		selenium.click("ProjectAddMain:Next");
		selenium.waitForPageToLoad("50000");
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "You are here: Home | Projects | Add Project"));
		assertTrue("Text not found", SeleniumTestHelper.waitForTextAndAssert(selenium, "Step 1 of 4: Input Project Data"));
		selenium.click("ProjectsData:Next");
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="102">
<file line="468" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="193" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="102">
<file line="331" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="429" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
		final String dfmt = null;
		this.createByteArrays();
		try
		{
			this.beginTransaction();

			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", dfmt, "drawing_comment", drawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="102">
<file line="93" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="193" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\ReviewTest.java"/>
<codefragment>
<![CDATA[
			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", "dfmt", "drawing_comment", drawingFile);
			em.persist(tempDrawingFile);
			
			final Drawing drawing1 = new Drawing("drawingNumber1", "drawing_comment", tempSymbol, tempGeometry, tempMap, tempDrawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="102">
<file line="69" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<file line="355" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\AvailabilityCheckDaoTest.java"/>
<codefragment>
<![CDATA[
			final Part partOS_00003 = new Part("OS_00003", "VCXO3", Part.STATUS_PART, groupOS, null);
						
			final StringProperty propdrawing = new StringProperty("Drawing", "Drawing Description");
			final StringProperty propvalue = new StringProperty("Value", "Value Description");
			groupOS.getProperties().add(propdrawing);
			groupOS.getProperties().add(propvalue);
			new StringPropertyValue("10014", propdrawing, partOS_00001);
			new StringPropertyValue("10014", propdrawing, partOS_00002);
			new StringPropertyValue("10014", propvalue, partOS_00001);
			new StringPropertyValue("10014", propvalue, partOS_00002);
							
			pgroupDao.makePersistent(groupOS);
			
			User user1 = this.createUser();
			
			// availability Check
			final AvailabilityCheck avcheck1 = new AvailabilityCheck(100, "comment_owner1", "comment_purchaser1", user1, partOS_00002);
]]>
</codefragment>
</duplication>
<duplication lines="24" tokens="102">
<file line="92" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\persistence\Drawing.java"/>
<file line="120" path="D:\work\workspace-qs\Caddat\src\java\at\fhj\itm\persistence\Drawing.java"/>
<codefragment>
<![CDATA[
			Map map, List<DataSheet> listOfDataSheets, DrawingFile drawingFile) throws DataConstraintException
	{
		final String drawingNumber = oldDrawing.getDrawingNumber();
		final long versionNumber = drawDao.getHighestVersionNumber(drawingNumber);
		this.setDrawingNumber(drawingNumber);
		this.setVersionNumber(versionNumber+1L);
		this.setComment(comment);
		
		if(symbol!=null)
		{
			this.setSymbol(symbol);
		}
		if(geometry!=null)
		{
			this.setGeometry(geometry);
		}
		if(map!=null)
		{
			this.setMap(map);
		}
		if(drawingFile!=null)
		{
			this.setDrawingFile(drawingFile);
		}
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="101">
<file line="20" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\AddProjectWrongData.java"/>
<file line="16" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\gui\projects\addProject\NavigationAddProject.java"/>
<codefragment>
<![CDATA[
	private LogInHelper login;
	private SeleniumTestPreparation prepare;
	
	@Before
	public void setUp() throws Exception 
	{
		// Browser start
		System.setProperty(SeleniumConfiguration.SYSTEM_PROPERTY_NAME, SeleniumConfiguration.PORT);
		setUp(SeleniumConfiguration.START_URL, SeleniumConfiguration.BROWSER);
		
		// log in
		login = new LogInHelper();
		login.logIn(selenium);
		
		prepare = new SeleniumTestPreparation();
		
		prepare.removeAllProjectsAndMemberships();
	}

	@After
	public void tearDown()
	{
		try
        {
			// log out
			login.logOut(selenium);
			// close the browser
	        super.tearDown();
        }
        catch (Exception e)
        {
	        e.printStackTrace();
        }
	}
	
	/******************************************
	 * Projects Testcase Nr. 2.1
	 * Method tests the navigation to the 
	 * Function "Add Project" from different
	 * starting points in the GUI. 
	 ******************************************/
	@Test
	public void testNavigateProjectsAdd() throws Exception
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="100">
<file line="57" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\projects\unittest\ProjectDaoTest.java"/>
<file line="105" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\projects\unittest\ProjectDaoTest.java"/>
<codefragment>
<![CDATA[
		List<ProjectMembership> members = new ArrayList<ProjectMembership>();
		String passwd = ServiceLocator.getInstance().encodeString("test");

		userDao.setEntityManager(em);
		
		// Create new Users
		User user1 = new User("testuser1", passwd, "test", "test", "test", false);
		User user2 = new User("testuser2", passwd, "test", "test", "test", false);
		
		userDao.insert(user1);
		userDao.insert(user2);
		
		try
		{
			// Create a new Project
			// attributes for projects must not be null
			Project project = new Project("project name", "project description", "PIE.01.901-12",
					date, date, "test", decimal , decimal, decimal, decimal, decimal, decimal);
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="100">
<file line="1291" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="1328" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			final Map<String, String> propValMapping = new HashMap<String, String>();
			propValMapping.put(propName, propValue);
			
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(1,resultingParts.size());
			assertEquals(resultingParts.get(0).getPartNumber(),"RE_00003");
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	
	
	/**
	 * @param orderBy and asc/desc- Tests
	 */
	
	/**
	 * searchOrderedByDescriptionASCorDESC
	 */
	@Test
	public void searchOrderedByDescriptionASCorDESC()
]]>
</codefragment>
</duplication>
<duplication lines="22" tokens="100">
<file line="597" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="866" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			final Map<String, String> propValMapping = new HashMap<String, String>();
			propValMapping.put(propName, propValue);
			
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(resultingParts.size(), 1);
			assertEquals(resultingParts.get(0).getPartNumber(), "RE_00002");
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	/**
	 * searchForAll2ProductGroups
	 */
	@Test
	public void searchForAll2ProductGroups()
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="100">
<file line="565" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="763" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			final Map<String, String> propValMapping = new HashMap<String, String>();
			propValMapping.put(propName, propValue);
			
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(resultingParts.size(), 1);
			assertEquals(resultingParts.get(0).getPartNumber(),"RE_00003");
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	
	@Test
	public void searchStatiOrderedByPartNumberASC()
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="100">
<file line="501" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="533" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<file line="597" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\PartSearchDaoTest.java"/>
<codefragment>
<![CDATA[
			final Map<String, String> propValMapping = new HashMap<String, String>();
			propValMapping.put(propName, propValue);
			
			List<Part> resultingParts = searchDao.search(productGroupIdentifier, propValMapping, null, true);
			
			assertEquals(resultingParts.size(), 1);
			assertEquals(resultingParts.get(0).getPartNumber(), "RE_00002");
		}
		catch(DaoException daoExc){
			assertTrue(daoExc.getMessage(), false);
		}
		finally
		{
			this.commitTransaction();
		}
	}
	
	@Test
	public void searchDescriptionAllGroups()
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="100">
<file line="88" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<file line="332" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DrawingTest.java"/>
<codefragment>
<![CDATA[
		this.createByteArrays();
		try
		{
			this.beginTransaction();

			final Symbol tempSymbol = new Symbol("thesymbol1", "smt", "symcomment", symbolData);
			em.persist(tempSymbol);
			
			final Geometry tempGeometry = new Geometry("geometry1","gmt", "geo_comment", geometryData );
			em.persist(tempGeometry);
								
			final at.fhj.itm.persistence.Map tempMap = new at.fhj.itm.persistence.Map("themap1", "mmt", "map_comment", mapData);
			em.persist(tempMap);
			
			final DrawingFile tempDrawingFile = new DrawingFile("dFile", mmt, "drawing_comment", drawingFile);
]]>
</codefragment>
</duplication>
<duplication lines="14" tokens="100">
<file line="49" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetDaoTest.java"/>
<file line="40" path="D:\work\workspace-qs\Caddat\src-test\java\at\fhj\itm\persistence\unittest\DataSheetTest.java"/>
<codefragment>
<![CDATA[
			this.beginTransaction();
			byte[] byteArray = new byte[3];
			byteArray[0]='a';
			byteArray[1]='b';
			byteArray[2]='c';
			
			byte[] byteArray2 = new byte[3];
			byteArray2[0]='x';
			byteArray2[1]='y';
			byteArray2[2]='z';
			
			DataSheet sheet1 = new DataSheet(sheet_title1, "sheet_mime_type1", "pfix1", byteArray);
			DataSheet sheet2 = new DataSheet("sheet_title2", "sheet_mime_type2", "pfix2", byteArray2);
			DataSheet sheet3 = new DataSheet("sheet_title3", "sheet_mime_type3", "pfix3", byteArray);
]]>
</codefragment>
</duplication>
</pmd-cpd>